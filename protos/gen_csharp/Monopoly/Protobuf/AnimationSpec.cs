// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: monopoly/animation_spec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Monopoly.Protobuf {

  /// <summary>Holder for reflection information generated from monopoly/animation_spec.proto</summary>
  public static partial class AnimationSpecReflection {

    #region Descriptor
    /// <summary>File descriptor for monopoly/animation_spec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnimationSpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1tb25vcG9seS9hbmltYXRpb25fc3BlYy5wcm90bxIIbW9ub3BvbHkaGWdv",
            "b2dsZS9wcm90b2J1Zi9hbnkucHJvdG8aGm1vbm9wb2x5L2dhbWVfcGxheWVy",
            "LnByb3RvGhdtb25vcG9seS9wcm9wZXJ0eS5wcm90bxoZbW9ub3BvbHkvY29v",
            "cmRpbmF0ZS5wcm90bxoVbW9ub3BvbHkvY2hhbmNlLnByb3RvIqsBCglBbmlt",
            "YXRpb24SDAoEbmFtZRgBIAEoCRIlCgR0eXBlGAIgASgOMhcubW9ub3BvbHku",
            "QW5pbWF0aW9uVHlwZRIOCgZsZW5ndGgYAyABKAUSKAoFZXh0cmEYBCABKAsy",
            "FC5nb29nbGUucHJvdG9idWYuQW55SACIAQESJQoIY2hpbGRyZW4YBSADKAsy",
            "Ey5tb25vcG9seS5BbmltYXRpb25CCAoGX2V4dHJhIjoKEEFuaW1hdGlvblBh",
            "eWxvYWQSJgoJYW5pbWF0aW9uGAEgASgLMhMubW9ub3BvbHkuQW5pbWF0aW9u",
            "IjUKDURpY2VSb2xsRXh0cmESJAoGcGxheWVyGAEgASgLMhQubW9ub3BvbHku",
            "R2FtZVBsYXllciJECg1EaWNlRG93bkV4dHJhEg0KBXN0ZXBzGAEgASgFEiQK",
            "BnBsYXllchgCIAEoCzIULm1vbm9wb2x5LkdhbWVQbGF5ZXIiegoJTW92ZUV4",
            "dHJhEiQKBnBsYXllchgBIAEoCzIULm1vbm9wb2x5LkdhbWVQbGF5ZXISIwoF",
            "c3RhcnQYAiABKAsyFC5tb25vcG9seS5Db29yZGluYXRlEiIKBHBhdGgYAyAD",
            "KAsyFC5tb25vcG9seS5Db29yZGluYXRlIjoKDkZvY3VzTGFuZEV4dHJhEigK",
            "CHByb3BlcnR5GAEgASgLMhYubW9ub3BvbHkuUHJvcGVydHlJbmZvIjkKDUlu",
            "dmVzdGVkRXh0cmESKAoIcHJvcGVydHkYASABKAsyFi5tb25vcG9seS5Qcm9w",
            "ZXJ0eUluZm8iMAoIUGFuRXh0cmESJAoGdGFyZ2V0GAEgASgLMhQubW9ub3Bv",
            "bHkuQ29vcmRpbmF0ZSI2Cg5UdXJuU3RhcnRFeHRyYRIkCgZwbGF5ZXIYASAB",
            "KAsyFC5tb25vcG9seS5HYW1lUGxheWVyIlgKDFBheVJlbnRFeHRyYRIjCgVw",
            "YXllchgBIAEoCzIULm1vbm9wb2x5LkdhbWVQbGF5ZXISIwoFcGF5ZWUYAiAB",
            "KAsyFC5tb25vcG9seS5HYW1lUGxheWVyIqsBChJQbGF5ZXJFbW90aW9uRXh0",
            "cmESJAoGcGxheWVyGAEgASgLMhQubW9ub3BvbHkuR2FtZVBsYXllchI5Cgdl",
            "bW90aW9uGAIgASgOMigubW9ub3BvbHkuUGxheWVyRW1vdGlvbkV4dHJhLkVt",
            "b3Rpb25UeXBlIjQKC0Vtb3Rpb25UeXBlEg8KC1VOU1BFQ0lGSUVEEAASCQoF",
            "Q0hFRVIQARIJCgVBTkdSWRACInAKFE9wZW5DaGFuY2VDaGVzdEV4dHJhEi8K",
            "EWNoYW5jZV9jaGVzdF90aWxlGAEgASgLMhQubW9ub3BvbHkuQ29vcmRpbmF0",
            "ZRInCgZjaGFuY2UYAiABKAsyFy5tb25vcG9seS5DaGFuY2VEaXNwbGF5IpYB",
            "ChNUZWxlcG9ydFBpY2t1cEV4dHJhEioKB3ZlaGljbGUYASABKA4yGS5tb25v",
            "cG9seS5UZWxlcG9ydFZlaGljbGUSLQoPcGlja3VwX2xvY2F0aW9uGAIgASgL",
            "MhQubW9ub3BvbHkuQ29vcmRpbmF0ZRIkCgZwbGF5ZXIYAyABKAsyFC5tb25v",
            "cG9seS5HYW1lUGxheWVyIpgBChRUZWxlcG9ydERyb3BvZmZFeHRyYRIqCgd2",
            "ZWhpY2xlGAEgASgOMhkubW9ub3BvbHkuVGVsZXBvcnRWZWhpY2xlEi4KEGRy",
            "b3BvZmZfbG9jYXRpb24YAiABKAsyFC5tb25vcG9seS5Db29yZGluYXRlEiQK",
            "BnBsYXllchgDIAEoCzIULm1vbm9wb2x5LkdhbWVQbGF5ZXIqPQoNQW5pbWF0",
            "aW9uVHlwZRILCgdERUZBVUxUEAASDAoIU0VRVUVOQ0UQARIICgRSQUNFEAIS",
            "BwoDQUxMEAMqIgoPVGVsZXBvcnRWZWhpY2xlEg8KC1VOU1BFQ0lGSUVEEABC",
            "FKoCEU1vbm9wb2x5LlByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Monopoly.Protobuf.GamePlayerReflection.Descriptor, global::Monopoly.Protobuf.PropertyReflection.Descriptor, global::Monopoly.Protobuf.CoordinateReflection.Descriptor, global::Monopoly.Protobuf.ChanceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Monopoly.Protobuf.AnimationType), typeof(global::Monopoly.Protobuf.TeleportVehicle), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.Animation), global::Monopoly.Protobuf.Animation.Parser, new[]{ "Name", "Type", "Length", "Extra", "Children" }, new[]{ "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.AnimationPayload), global::Monopoly.Protobuf.AnimationPayload.Parser, new[]{ "Animation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.DiceRollExtra), global::Monopoly.Protobuf.DiceRollExtra.Parser, new[]{ "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.DiceDownExtra), global::Monopoly.Protobuf.DiceDownExtra.Parser, new[]{ "Steps", "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.MoveExtra), global::Monopoly.Protobuf.MoveExtra.Parser, new[]{ "Player", "Start", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.FocusLandExtra), global::Monopoly.Protobuf.FocusLandExtra.Parser, new[]{ "Property" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.InvestedExtra), global::Monopoly.Protobuf.InvestedExtra.Parser, new[]{ "Property" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.PanExtra), global::Monopoly.Protobuf.PanExtra.Parser, new[]{ "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.TurnStartExtra), global::Monopoly.Protobuf.TurnStartExtra.Parser, new[]{ "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.PayRentExtra), global::Monopoly.Protobuf.PayRentExtra.Parser, new[]{ "Payer", "Payee" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.PlayerEmotionExtra), global::Monopoly.Protobuf.PlayerEmotionExtra.Parser, new[]{ "Player", "Emotion" }, null, new[]{ typeof(global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.OpenChanceChestExtra), global::Monopoly.Protobuf.OpenChanceChestExtra.Parser, new[]{ "ChanceChestTile", "Chance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.TeleportPickupExtra), global::Monopoly.Protobuf.TeleportPickupExtra.Parser, new[]{ "Vehicle", "PickupLocation", "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.TeleportDropoffExtra), global::Monopoly.Protobuf.TeleportDropoffExtra.Parser, new[]{ "Vehicle", "DropoffLocation", "Player" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AnimationType {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    /// <summary>
    /// container that plays child animations one by one
    /// </summary>
    [pbr::OriginalName("SEQUENCE")] Sequence = 1,
    /// <summary>
    /// container that plays child animations and finish when one of them finishes.
    /// Other animations are truncated if possible
    /// </summary>
    [pbr::OriginalName("RACE")] Race = 2,
    /// <summary>
    /// container that plays child animations and wait for the longest one to
    /// finish.
    /// </summary>
    [pbr::OriginalName("ALL")] All = 3,
  }

  /// <summary>
  /// How the player is being teleported. Could be things like UFO or police car.
  /// </summary>
  public enum TeleportVehicle {
    [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
  }

  #endregion

  #region Messages
  public sealed partial class Animation : pb::IMessage<Animation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      length_ = other.length_;
      extra_ = other.extra_ != null ? other.extra_.Clone() : null;
      children_ = other.children_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Monopoly.Protobuf.AnimationType type_ = global::Monopoly.Protobuf.AnimationType.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.AnimationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private int length_;
    /// <summary>
    /// the duration in ms, specified when type is DEFAULT
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any extra_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Extra {
      get { return extra_; }
      set {
        extra_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Monopoly.Protobuf.Animation> _repeated_children_codec
        = pb::FieldCodec.ForMessage(42, global::Monopoly.Protobuf.Animation.Parser);
    private readonly pbc::RepeatedField<global::Monopoly.Protobuf.Animation> children_ = new pbc::RepeatedField<global::Monopoly.Protobuf.Animation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Monopoly.Protobuf.Animation> Children {
      get { return children_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Length != other.Length) return false;
      if (!object.Equals(Extra, other.Extra)) return false;
      if(!children_.Equals(other.children_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != global::Monopoly.Protobuf.AnimationType.Default) hash ^= Type.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (extra_ != null) hash ^= Extra.GetHashCode();
      hash ^= children_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != global::Monopoly.Protobuf.AnimationType.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Length != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Length);
      }
      if (extra_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Extra);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != global::Monopoly.Protobuf.AnimationType.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Length != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Length);
      }
      if (extra_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Extra);
      }
      children_.WriteTo(ref output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != global::Monopoly.Protobuf.AnimationType.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (extra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extra);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != global::Monopoly.Protobuf.AnimationType.Default) {
        Type = other.Type;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.extra_ != null) {
        if (extra_ == null) {
          Extra = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Extra.MergeFrom(other.Extra);
      }
      children_.Add(other.children_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Monopoly.Protobuf.AnimationType) input.ReadEnum();
            break;
          }
          case 24: {
            Length = input.ReadInt32();
            break;
          }
          case 34: {
            if (extra_ == null) {
              Extra = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Extra);
            break;
          }
          case 42: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Monopoly.Protobuf.AnimationType) input.ReadEnum();
            break;
          }
          case 24: {
            Length = input.ReadInt32();
            break;
          }
          case 34: {
            if (extra_ == null) {
              Extra = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Extra);
            break;
          }
          case 42: {
            children_.AddEntriesFrom(ref input, _repeated_children_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// type : "animation"
  /// packet_type : DEFAULT
  /// </summary>
  public sealed partial class AnimationPayload : pb::IMessage<AnimationPayload>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnimationPayload> _parser = new pb::MessageParser<AnimationPayload>(() => new AnimationPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationPayload(AnimationPayload other) : this() {
      animation_ = other.animation_ != null ? other.animation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationPayload Clone() {
      return new AnimationPayload(this);
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 1;
    private global::Monopoly.Protobuf.Animation animation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.Animation Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Animation, other.Animation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (animation_ != null) hash ^= Animation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (animation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Animation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (animation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Animation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (animation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationPayload other) {
      if (other == null) {
        return;
      }
      if (other.animation_ != null) {
        if (animation_ == null) {
          Animation = new global::Monopoly.Protobuf.Animation();
        }
        Animation.MergeFrom(other.Animation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (animation_ == null) {
              Animation = new global::Monopoly.Protobuf.Animation();
            }
            input.ReadMessage(Animation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (animation_ == null) {
              Animation = new global::Monopoly.Protobuf.Animation();
            }
            input.ReadMessage(Animation);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "dice_roll"
  /// </summary>
  public sealed partial class DiceRollExtra : pb::IMessage<DiceRollExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiceRollExtra> _parser = new pb::MessageParser<DiceRollExtra>(() => new DiceRollExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiceRollExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceRollExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceRollExtra(DiceRollExtra other) : this() {
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceRollExtra Clone() {
      return new DiceRollExtra(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Monopoly.Protobuf.GamePlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiceRollExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiceRollExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiceRollExtra other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Monopoly.Protobuf.GamePlayer();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "dice_down"
  /// dice drop and review final number
  /// </summary>
  public sealed partial class DiceDownExtra : pb::IMessage<DiceDownExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiceDownExtra> _parser = new pb::MessageParser<DiceDownExtra>(() => new DiceDownExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiceDownExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceDownExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceDownExtra(DiceDownExtra other) : this() {
      steps_ = other.steps_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceDownExtra Clone() {
      return new DiceDownExtra(this);
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 1;
    private int steps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Steps {
      get { return steps_; }
      set {
        steps_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Monopoly.Protobuf.GamePlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiceDownExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiceDownExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Steps != other.Steps) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Steps != 0) hash ^= Steps.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Steps != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Steps);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Steps != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Steps);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Steps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Steps);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiceDownExtra other) {
      if (other == null) {
        return;
      }
      if (other.Steps != 0) {
        Steps = other.Steps;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Monopoly.Protobuf.GamePlayer();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Steps = input.ReadInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Steps = input.ReadInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "move"
  /// player move along tile path
  /// </summary>
  public sealed partial class MoveExtra : pb::IMessage<MoveExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveExtra> _parser = new pb::MessageParser<MoveExtra>(() => new MoveExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExtra(MoveExtra other) : this() {
      player_ = other.player_ != null ? other.player_.Clone() : null;
      start_ = other.start_ != null ? other.start_.Clone() : null;
      path_ = other.path_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveExtra Clone() {
      return new MoveExtra(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Monopoly.Protobuf.GamePlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private global::Monopoly.Protobuf.Coordinate start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.Coordinate Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Monopoly.Protobuf.Coordinate> _repeated_path_codec
        = pb::FieldCodec.ForMessage(26, global::Monopoly.Protobuf.Coordinate.Parser);
    private readonly pbc::RepeatedField<global::Monopoly.Protobuf.Coordinate> path_ = new pbc::RepeatedField<global::Monopoly.Protobuf.Coordinate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Monopoly.Protobuf.Coordinate> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if(!path_.Equals(other.path_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (start_ != null) hash ^= Start.GetHashCode();
      hash ^= path_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (start_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (start_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      path_.WriteTo(ref output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveExtra other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Monopoly.Protobuf.GamePlayer();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.start_ != null) {
        if (start_ == null) {
          Start = new global::Monopoly.Protobuf.Coordinate();
        }
        Start.MergeFrom(other.Start);
      }
      path_.Add(other.path_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
          case 18: {
            if (start_ == null) {
              Start = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(Start);
            break;
          }
          case 26: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
          case 18: {
            if (start_ == null) {
              Start = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(Start);
            break;
          }
          case 26: {
            path_.AddEntriesFrom(ref input, _repeated_path_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "focus_land"
  /// highlight the property for purchase
  /// </summary>
  public sealed partial class FocusLandExtra : pb::IMessage<FocusLandExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FocusLandExtra> _parser = new pb::MessageParser<FocusLandExtra>(() => new FocusLandExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FocusLandExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusLandExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusLandExtra(FocusLandExtra other) : this() {
      property_ = other.property_ != null ? other.property_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusLandExtra Clone() {
      return new FocusLandExtra(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Monopoly.Protobuf.PropertyInfo property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.PropertyInfo Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FocusLandExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FocusLandExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FocusLandExtra other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          Property = new global::Monopoly.Protobuf.PropertyInfo();
        }
        Property.MergeFrom(other.Property);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (property_ == null) {
              Property = new global::Monopoly.Protobuf.PropertyInfo();
            }
            input.ReadMessage(Property);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (property_ == null) {
              Property = new global::Monopoly.Protobuf.PropertyInfo();
            }
            input.ReadMessage(Property);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "invested"
  /// show animation for purchase/upgrade
  /// </summary>
  public sealed partial class InvestedExtra : pb::IMessage<InvestedExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InvestedExtra> _parser = new pb::MessageParser<InvestedExtra>(() => new InvestedExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvestedExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestedExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestedExtra(InvestedExtra other) : this() {
      property_ = other.property_ != null ? other.property_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestedExtra Clone() {
      return new InvestedExtra(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Monopoly.Protobuf.PropertyInfo property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.PropertyInfo Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvestedExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvestedExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvestedExtra other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          Property = new global::Monopoly.Protobuf.PropertyInfo();
        }
        Property.MergeFrom(other.Property);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (property_ == null) {
              Property = new global::Monopoly.Protobuf.PropertyInfo();
            }
            input.ReadMessage(Property);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (property_ == null) {
              Property = new global::Monopoly.Protobuf.PropertyInfo();
            }
            input.ReadMessage(Property);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "pan"
  /// pan camera to next player
  /// </summary>
  public sealed partial class PanExtra : pb::IMessage<PanExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PanExtra> _parser = new pb::MessageParser<PanExtra>(() => new PanExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PanExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PanExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PanExtra(PanExtra other) : this() {
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PanExtra Clone() {
      return new PanExtra(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Monopoly.Protobuf.Coordinate target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.Coordinate Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PanExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PanExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PanExtra other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Monopoly.Protobuf.Coordinate();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (target_ == null) {
              Target = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (target_ == null) {
              Target = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "turn_start"
  /// current player play ready to start animation
  /// </summary>
  public sealed partial class TurnStartExtra : pb::IMessage<TurnStartExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TurnStartExtra> _parser = new pb::MessageParser<TurnStartExtra>(() => new TurnStartExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnStartExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnStartExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnStartExtra(TurnStartExtra other) : this() {
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnStartExtra Clone() {
      return new TurnStartExtra(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Monopoly.Protobuf.GamePlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnStartExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnStartExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnStartExtra other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Monopoly.Protobuf.GamePlayer();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "pay_rent"
  /// </summary>
  public sealed partial class PayRentExtra : pb::IMessage<PayRentExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PayRentExtra> _parser = new pb::MessageParser<PayRentExtra>(() => new PayRentExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayRentExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayRentExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayRentExtra(PayRentExtra other) : this() {
      payer_ = other.payer_ != null ? other.payer_.Clone() : null;
      payee_ = other.payee_ != null ? other.payee_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayRentExtra Clone() {
      return new PayRentExtra(this);
    }

    /// <summary>Field number for the "payer" field.</summary>
    public const int PayerFieldNumber = 1;
    private global::Monopoly.Protobuf.GamePlayer payer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Payer {
      get { return payer_; }
      set {
        payer_ = value;
      }
    }

    /// <summary>Field number for the "payee" field.</summary>
    public const int PayeeFieldNumber = 2;
    private global::Monopoly.Protobuf.GamePlayer payee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Payee {
      get { return payee_; }
      set {
        payee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayRentExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayRentExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payer, other.Payer)) return false;
      if (!object.Equals(Payee, other.Payee)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payer_ != null) hash ^= Payer.GetHashCode();
      if (payee_ != null) hash ^= Payee.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (payer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payer);
      }
      if (payee_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Payee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (payer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payer);
      }
      if (payee_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Payee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payer);
      }
      if (payee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payee);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayRentExtra other) {
      if (other == null) {
        return;
      }
      if (other.payer_ != null) {
        if (payer_ == null) {
          Payer = new global::Monopoly.Protobuf.GamePlayer();
        }
        Payer.MergeFrom(other.Payer);
      }
      if (other.payee_ != null) {
        if (payee_ == null) {
          Payee = new global::Monopoly.Protobuf.GamePlayer();
        }
        Payee.MergeFrom(other.Payee);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (payer_ == null) {
              Payer = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Payer);
            break;
          }
          case 18: {
            if (payee_ == null) {
              Payee = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Payee);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (payer_ == null) {
              Payer = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Payer);
            break;
          }
          case 18: {
            if (payee_ == null) {
              Payee = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Payee);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "player_emotion"
  /// a general purpose animation to play to show player's emotion
  /// </summary>
  public sealed partial class PlayerEmotionExtra : pb::IMessage<PlayerEmotionExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerEmotionExtra> _parser = new pb::MessageParser<PlayerEmotionExtra>(() => new PlayerEmotionExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEmotionExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEmotionExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEmotionExtra(PlayerEmotionExtra other) : this() {
      player_ = other.player_ != null ? other.player_.Clone() : null;
      emotion_ = other.emotion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEmotionExtra Clone() {
      return new PlayerEmotionExtra(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Monopoly.Protobuf.GamePlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "emotion" field.</summary>
    public const int EmotionFieldNumber = 2;
    private global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType emotion_ = global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType Emotion {
      get { return emotion_; }
      set {
        emotion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEmotionExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEmotionExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      if (Emotion != other.Emotion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (Emotion != global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType.Unspecified) hash ^= Emotion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (Emotion != global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Emotion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (Emotion != global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Emotion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (Emotion != global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Emotion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEmotionExtra other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Monopoly.Protobuf.GamePlayer();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.Emotion != global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType.Unspecified) {
        Emotion = other.Emotion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
          case 16: {
            Emotion = (global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
          case 16: {
            Emotion = (global::Monopoly.Protobuf.PlayerEmotionExtra.Types.EmotionType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerEmotionExtra message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EmotionType {
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("CHEER")] Cheer = 1,
        [pbr::OriginalName("ANGRY")] Angry = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// extra for "open_chance_chest"
  /// When player arrive at the tile with chance chest, a card flyout from the
  /// chance chest to the center of the screen. The current player would need
  /// to click on anywhere to dismiss it after reading card. Other clients will
  /// play the same animation except they won't be able to dismiss the card.
  /// The card will be automatically dismissed when the current player dismiss it.
  /// </summary>
  public sealed partial class OpenChanceChestExtra : pb::IMessage<OpenChanceChestExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenChanceChestExtra> _parser = new pb::MessageParser<OpenChanceChestExtra>(() => new OpenChanceChestExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenChanceChestExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChanceChestExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChanceChestExtra(OpenChanceChestExtra other) : this() {
      chanceChestTile_ = other.chanceChestTile_ != null ? other.chanceChestTile_.Clone() : null;
      chance_ = other.chance_ != null ? other.chance_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChanceChestExtra Clone() {
      return new OpenChanceChestExtra(this);
    }

    /// <summary>Field number for the "chance_chest_tile" field.</summary>
    public const int ChanceChestTileFieldNumber = 1;
    private global::Monopoly.Protobuf.Coordinate chanceChestTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.Coordinate ChanceChestTile {
      get { return chanceChestTile_; }
      set {
        chanceChestTile_ = value;
      }
    }

    /// <summary>Field number for the "chance" field.</summary>
    public const int ChanceFieldNumber = 2;
    private global::Monopoly.Protobuf.ChanceDisplay chance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.ChanceDisplay Chance {
      get { return chance_; }
      set {
        chance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenChanceChestExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenChanceChestExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanceChestTile, other.ChanceChestTile)) return false;
      if (!object.Equals(Chance, other.Chance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chanceChestTile_ != null) hash ^= ChanceChestTile.GetHashCode();
      if (chance_ != null) hash ^= Chance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (chanceChestTile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanceChestTile);
      }
      if (chance_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Chance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (chanceChestTile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanceChestTile);
      }
      if (chance_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Chance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chanceChestTile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanceChestTile);
      }
      if (chance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenChanceChestExtra other) {
      if (other == null) {
        return;
      }
      if (other.chanceChestTile_ != null) {
        if (chanceChestTile_ == null) {
          ChanceChestTile = new global::Monopoly.Protobuf.Coordinate();
        }
        ChanceChestTile.MergeFrom(other.ChanceChestTile);
      }
      if (other.chance_ != null) {
        if (chance_ == null) {
          Chance = new global::Monopoly.Protobuf.ChanceDisplay();
        }
        Chance.MergeFrom(other.Chance);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chanceChestTile_ == null) {
              ChanceChestTile = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(ChanceChestTile);
            break;
          }
          case 18: {
            if (chance_ == null) {
              Chance = new global::Monopoly.Protobuf.ChanceDisplay();
            }
            input.ReadMessage(Chance);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (chanceChestTile_ == null) {
              ChanceChestTile = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(ChanceChestTile);
            break;
          }
          case 18: {
            if (chance_ == null) {
              Chance = new global::Monopoly.Protobuf.ChanceDisplay();
            }
            input.ReadMessage(Chance);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "teleport_pickup"
  /// teleport is composed of 3 animations played in sequence:
  /// "teleport_pickup", "pan" and "teleport_dropoff"
  /// </summary>
  public sealed partial class TeleportPickupExtra : pb::IMessage<TeleportPickupExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeleportPickupExtra> _parser = new pb::MessageParser<TeleportPickupExtra>(() => new TeleportPickupExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeleportPickupExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportPickupExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportPickupExtra(TeleportPickupExtra other) : this() {
      vehicle_ = other.vehicle_;
      pickupLocation_ = other.pickupLocation_ != null ? other.pickupLocation_.Clone() : null;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportPickupExtra Clone() {
      return new TeleportPickupExtra(this);
    }

    /// <summary>Field number for the "vehicle" field.</summary>
    public const int VehicleFieldNumber = 1;
    private global::Monopoly.Protobuf.TeleportVehicle vehicle_ = global::Monopoly.Protobuf.TeleportVehicle.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.TeleportVehicle Vehicle {
      get { return vehicle_; }
      set {
        vehicle_ = value;
      }
    }

    /// <summary>Field number for the "pickup_location" field.</summary>
    public const int PickupLocationFieldNumber = 2;
    private global::Monopoly.Protobuf.Coordinate pickupLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.Coordinate PickupLocation {
      get { return pickupLocation_; }
      set {
        pickupLocation_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::Monopoly.Protobuf.GamePlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeleportPickupExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeleportPickupExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vehicle != other.Vehicle) return false;
      if (!object.Equals(PickupLocation, other.PickupLocation)) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) hash ^= Vehicle.GetHashCode();
      if (pickupLocation_ != null) hash ^= PickupLocation.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Vehicle);
      }
      if (pickupLocation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PickupLocation);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Vehicle);
      }
      if (pickupLocation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PickupLocation);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Vehicle);
      }
      if (pickupLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PickupLocation);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeleportPickupExtra other) {
      if (other == null) {
        return;
      }
      if (other.Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) {
        Vehicle = other.Vehicle;
      }
      if (other.pickupLocation_ != null) {
        if (pickupLocation_ == null) {
          PickupLocation = new global::Monopoly.Protobuf.Coordinate();
        }
        PickupLocation.MergeFrom(other.PickupLocation);
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Monopoly.Protobuf.GamePlayer();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Vehicle = (global::Monopoly.Protobuf.TeleportVehicle) input.ReadEnum();
            break;
          }
          case 18: {
            if (pickupLocation_ == null) {
              PickupLocation = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(PickupLocation);
            break;
          }
          case 26: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Vehicle = (global::Monopoly.Protobuf.TeleportVehicle) input.ReadEnum();
            break;
          }
          case 18: {
            if (pickupLocation_ == null) {
              PickupLocation = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(PickupLocation);
            break;
          }
          case 26: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// extra for "teleport_dropoff"
  /// </summary>
  public sealed partial class TeleportDropoffExtra : pb::IMessage<TeleportDropoffExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeleportDropoffExtra> _parser = new pb::MessageParser<TeleportDropoffExtra>(() => new TeleportDropoffExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeleportDropoffExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnimationSpecReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportDropoffExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportDropoffExtra(TeleportDropoffExtra other) : this() {
      vehicle_ = other.vehicle_;
      dropoffLocation_ = other.dropoffLocation_ != null ? other.dropoffLocation_.Clone() : null;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportDropoffExtra Clone() {
      return new TeleportDropoffExtra(this);
    }

    /// <summary>Field number for the "vehicle" field.</summary>
    public const int VehicleFieldNumber = 1;
    private global::Monopoly.Protobuf.TeleportVehicle vehicle_ = global::Monopoly.Protobuf.TeleportVehicle.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.TeleportVehicle Vehicle {
      get { return vehicle_; }
      set {
        vehicle_ = value;
      }
    }

    /// <summary>Field number for the "dropoff_location" field.</summary>
    public const int DropoffLocationFieldNumber = 2;
    private global::Monopoly.Protobuf.Coordinate dropoffLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.Coordinate DropoffLocation {
      get { return dropoffLocation_; }
      set {
        dropoffLocation_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::Monopoly.Protobuf.GamePlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.GamePlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeleportDropoffExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeleportDropoffExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vehicle != other.Vehicle) return false;
      if (!object.Equals(DropoffLocation, other.DropoffLocation)) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) hash ^= Vehicle.GetHashCode();
      if (dropoffLocation_ != null) hash ^= DropoffLocation.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Vehicle);
      }
      if (dropoffLocation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DropoffLocation);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Vehicle);
      }
      if (dropoffLocation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DropoffLocation);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Vehicle);
      }
      if (dropoffLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DropoffLocation);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeleportDropoffExtra other) {
      if (other == null) {
        return;
      }
      if (other.Vehicle != global::Monopoly.Protobuf.TeleportVehicle.Unspecified) {
        Vehicle = other.Vehicle;
      }
      if (other.dropoffLocation_ != null) {
        if (dropoffLocation_ == null) {
          DropoffLocation = new global::Monopoly.Protobuf.Coordinate();
        }
        DropoffLocation.MergeFrom(other.DropoffLocation);
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Monopoly.Protobuf.GamePlayer();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Vehicle = (global::Monopoly.Protobuf.TeleportVehicle) input.ReadEnum();
            break;
          }
          case 18: {
            if (dropoffLocation_ == null) {
              DropoffLocation = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(DropoffLocation);
            break;
          }
          case 26: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Vehicle = (global::Monopoly.Protobuf.TeleportVehicle) input.ReadEnum();
            break;
          }
          case 18: {
            if (dropoffLocation_ == null) {
              DropoffLocation = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(DropoffLocation);
            break;
          }
          case 26: {
            if (player_ == null) {
              Player = new global::Monopoly.Protobuf.GamePlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
