// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: monopoly/announce_pay_rent_spec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Monopoly.Protobuf {

  /// <summary>Holder for reflection information generated from monopoly/announce_pay_rent_spec.proto</summary>
  public static partial class AnnouncePayRentSpecReflection {

    #region Descriptor
    /// <summary>File descriptor for monopoly/announce_pay_rent_spec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnnouncePayRentSpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVtb25vcG9seS9hbm5vdW5jZV9wYXlfcmVudF9zcGVjLnByb3RvEghtb25v",
            "cG9seRoWbW9ub3BvbHkvcGF5bWVudC5wcm90byJmChZBbm5vdW5jZVBheVJl",
            "bnRQYXlsb2FkEg0KBXBheWVyGAEgASgJEiMKCHBheW1lbnRzGAIgAygLMhEu",
            "bW9ub3BvbHkuUGF5bWVudBIYChBteV9jdXJyZW50X21vbmV5GAMgASgFQhSq",
            "AhFNb25vcG9seS5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Monopoly.Protobuf.PaymentReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.AnnouncePayRentPayload), global::Monopoly.Protobuf.AnnouncePayRentPayload.Parser, new[]{ "Payer", "Payments", "MyCurrentMoney" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// type : "announce_pay_rent",
  /// packet_type : DEFAULT
  /// </summary>
  public sealed partial class AnnouncePayRentPayload : pb::IMessage<AnnouncePayRentPayload>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnnouncePayRentPayload> _parser = new pb::MessageParser<AnnouncePayRentPayload>(() => new AnnouncePayRentPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnouncePayRentPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.AnnouncePayRentSpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnouncePayRentPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnouncePayRentPayload(AnnouncePayRentPayload other) : this() {
      payer_ = other.payer_;
      payments_ = other.payments_.Clone();
      myCurrentMoney_ = other.myCurrentMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnouncePayRentPayload Clone() {
      return new AnnouncePayRentPayload(this);
    }

    /// <summary>Field number for the "payer" field.</summary>
    public const int PayerFieldNumber = 1;
    private string payer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payer {
      get { return payer_; }
      set {
        payer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payments" field.</summary>
    public const int PaymentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Monopoly.Protobuf.Payment> _repeated_payments_codec
        = pb::FieldCodec.ForMessage(18, global::Monopoly.Protobuf.Payment.Parser);
    private readonly pbc::RepeatedField<global::Monopoly.Protobuf.Payment> payments_ = new pbc::RepeatedField<global::Monopoly.Protobuf.Payment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Monopoly.Protobuf.Payment> Payments {
      get { return payments_; }
    }

    /// <summary>Field number for the "my_current_money" field.</summary>
    public const int MyCurrentMoneyFieldNumber = 3;
    private int myCurrentMoney_;
    /// <summary>
    /// the updated money of the current player. This normally only affect payer
    /// and payee. All other players will receive an unchanged amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyCurrentMoney {
      get { return myCurrentMoney_; }
      set {
        myCurrentMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnouncePayRentPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnouncePayRentPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payer != other.Payer) return false;
      if(!payments_.Equals(other.payments_)) return false;
      if (MyCurrentMoney != other.MyCurrentMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payer.Length != 0) hash ^= Payer.GetHashCode();
      hash ^= payments_.GetHashCode();
      if (MyCurrentMoney != 0) hash ^= MyCurrentMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Payer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Payer);
      }
      payments_.WriteTo(output, _repeated_payments_codec);
      if (MyCurrentMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MyCurrentMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Payer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Payer);
      }
      payments_.WriteTo(ref output, _repeated_payments_codec);
      if (MyCurrentMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MyCurrentMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payer);
      }
      size += payments_.CalculateSize(_repeated_payments_codec);
      if (MyCurrentMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyCurrentMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnouncePayRentPayload other) {
      if (other == null) {
        return;
      }
      if (other.Payer.Length != 0) {
        Payer = other.Payer;
      }
      payments_.Add(other.payments_);
      if (other.MyCurrentMoney != 0) {
        MyCurrentMoney = other.MyCurrentMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payer = input.ReadString();
            break;
          }
          case 18: {
            payments_.AddEntriesFrom(input, _repeated_payments_codec);
            break;
          }
          case 24: {
            MyCurrentMoney = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Payer = input.ReadString();
            break;
          }
          case 18: {
            payments_.AddEntriesFrom(ref input, _repeated_payments_codec);
            break;
          }
          case 24: {
            MyCurrentMoney = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
