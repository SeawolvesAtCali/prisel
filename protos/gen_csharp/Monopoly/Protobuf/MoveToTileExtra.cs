// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: monopoly/move_to_tile_extra.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Monopoly.Protobuf {

  /// <summary>Holder for reflection information generated from monopoly/move_to_tile_extra.proto</summary>
  public static partial class MoveToTileExtraReflection {

    #region Descriptor
    /// <summary>File descriptor for monopoly/move_to_tile_extra.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MoveToTileExtraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFtb25vcG9seS9tb3ZlX3RvX3RpbGVfZXh0cmEucHJvdG8SCG1vbm9wb2x5",
            "Ghltb25vcG9seS9jb29yZGluYXRlLnByb3RvIkoKD01vdmVUb1RpbGVFeHRy",
            "YRIiCgR0aWxlGAEgASgLMhQubW9ub3BvbHkuQ29vcmRpbmF0ZRITCgtpc190",
            "ZWxlcG9ydBgCIAEoCEIUqgIRTW9ub3BvbHkuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Monopoly.Protobuf.CoordinateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Monopoly.Protobuf.MoveToTileExtra), global::Monopoly.Protobuf.MoveToTileExtra.Parser, new[]{ "Tile", "IsTeleport" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// move to each of the tiles sequentially and perform actions on the each
  /// tiles. Normally, player would only go to one tile.
  /// </summary>
  public sealed partial class MoveToTileExtra : pb::IMessage<MoveToTileExtra>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveToTileExtra> _parser = new pb::MessageParser<MoveToTileExtra>(() => new MoveToTileExtra());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveToTileExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Monopoly.Protobuf.MoveToTileExtraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToTileExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToTileExtra(MoveToTileExtra other) : this() {
      tile_ = other.tile_ != null ? other.tile_.Clone() : null;
      isTeleport_ = other.isTeleport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToTileExtra Clone() {
      return new MoveToTileExtra(this);
    }

    /// <summary>Field number for the "tile" field.</summary>
    public const int TileFieldNumber = 1;
    private global::Monopoly.Protobuf.Coordinate tile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Monopoly.Protobuf.Coordinate Tile {
      get { return tile_; }
      set {
        tile_ = value;
      }
    }

    /// <summary>Field number for the "is_teleport" field.</summary>
    public const int IsTeleportFieldNumber = 2;
    private bool isTeleport_;
    /// <summary>
    /// if teleport, the player will immediately appear at the target tile
    /// without passing "GO"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeleport {
      get { return isTeleport_; }
      set {
        isTeleport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveToTileExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveToTileExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tile, other.Tile)) return false;
      if (IsTeleport != other.IsTeleport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tile_ != null) hash ^= Tile.GetHashCode();
      if (IsTeleport != false) hash ^= IsTeleport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (tile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tile);
      }
      if (IsTeleport != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTeleport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (tile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tile);
      }
      if (IsTeleport != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTeleport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tile);
      }
      if (IsTeleport != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveToTileExtra other) {
      if (other == null) {
        return;
      }
      if (other.tile_ != null) {
        if (tile_ == null) {
          Tile = new global::Monopoly.Protobuf.Coordinate();
        }
        Tile.MergeFrom(other.Tile);
      }
      if (other.IsTeleport != false) {
        IsTeleport = other.IsTeleport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tile_ == null) {
              Tile = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(Tile);
            break;
          }
          case 16: {
            IsTeleport = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (tile_ == null) {
              Tile = new global::Monopoly.Protobuf.Coordinate();
            }
            input.ReadMessage(Tile);
            break;
          }
          case 16: {
            IsTeleport = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
