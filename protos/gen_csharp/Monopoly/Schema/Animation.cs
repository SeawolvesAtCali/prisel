// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Animation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Animation GetRootAsAnimation(ByteBuffer _bb) { return GetRootAsAnimation(_bb, new Animation()); }
  public static Animation GetRootAsAnimation(ByteBuffer _bb, Animation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Animation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public Monopoly.Schema.AnimationType Type { get { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.AnimationType)__p.bb.GetInt(o + __p.bb_pos) : Monopoly.Schema.AnimationType.DEFAULT; } }
  public int Length { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public byte Extra(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ExtraLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtraBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetExtraBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetExtraArray() { return __p.__vector_as_array<byte>(10); }
  public Monopoly.Schema.Animation? Children(int j) { int o = __p.__offset(12); return o != 0 ? (Monopoly.Schema.Animation?)(new Monopoly.Schema.Animation()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Monopoly.Schema.Animation> CreateAnimation(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Monopoly.Schema.AnimationType type = Monopoly.Schema.AnimationType.DEFAULT,
      int length = 0,
      VectorOffset extraOffset = default(VectorOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Animation.AddChildren(builder, childrenOffset);
    Animation.AddExtra(builder, extraOffset);
    Animation.AddLength(builder, length);
    Animation.AddType(builder, type);
    Animation.AddName(builder, nameOffset);
    return Animation.EndAnimation(builder);
  }

  public static void StartAnimation(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Monopoly.Schema.AnimationType type) { builder.AddInt(1, (int)type, 0); }
  public static void AddLength(FlatBufferBuilder builder, int length) { builder.AddInt(2, length, 0); }
  public static void AddExtra(FlatBufferBuilder builder, VectorOffset extraOffset) { builder.AddOffset(3, extraOffset.Value, 0); }
  public static VectorOffset CreateExtraVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtraVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartExtraVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(4, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<Monopoly.Schema.Animation>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<Monopoly.Schema.Animation>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Monopoly.Schema.Animation> EndAnimation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.Animation>(o);
  }
};


}
