// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AnimationPayload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AnimationPayload GetRootAsAnimationPayload(ByteBuffer _bb) { return GetRootAsAnimationPayload(_bb, new AnimationPayload()); }
  public static AnimationPayload GetRootAsAnimationPayload(ByteBuffer _bb, AnimationPayload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationPayload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.Animation? Animation { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.Animation?)(new Monopoly.Schema.Animation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Monopoly.Schema.AnimationPayload> CreateAnimationPayload(FlatBufferBuilder builder,
      Offset<Monopoly.Schema.Animation> animationOffset = default(Offset<Monopoly.Schema.Animation>)) {
    builder.StartTable(1);
    AnimationPayload.AddAnimation(builder, animationOffset);
    return AnimationPayload.EndAnimationPayload(builder);
  }

  public static void StartAnimationPayload(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAnimation(FlatBufferBuilder builder, Offset<Monopoly.Schema.Animation> animationOffset) { builder.AddOffset(0, animationOffset.Value, 0); }
  public static Offset<Monopoly.Schema.AnimationPayload> EndAnimationPayload(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.AnimationPayload>(o);
  }
};


}
