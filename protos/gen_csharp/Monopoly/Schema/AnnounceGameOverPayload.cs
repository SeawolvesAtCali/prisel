// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AnnounceGameOverPayload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AnnounceGameOverPayload GetRootAsAnnounceGameOverPayload(ByteBuffer _bb) { return GetRootAsAnnounceGameOverPayload(_bb, new AnnounceGameOverPayload()); }
  public static AnnounceGameOverPayload GetRootAsAnnounceGameOverPayload(ByteBuffer _bb, AnnounceGameOverPayload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnnounceGameOverPayload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.Rank? Ranks(int j) { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.Rank?)(new Monopoly.Schema.Rank()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RanksLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Monopoly.Schema.AnnounceGameOverPayload> CreateAnnounceGameOverPayload(FlatBufferBuilder builder,
      VectorOffset ranksOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AnnounceGameOverPayload.AddRanks(builder, ranksOffset);
    return AnnounceGameOverPayload.EndAnnounceGameOverPayload(builder);
  }

  public static void StartAnnounceGameOverPayload(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRanks(FlatBufferBuilder builder, VectorOffset ranksOffset) { builder.AddOffset(0, ranksOffset.Value, 0); }
  public static VectorOffset CreateRanksVector(FlatBufferBuilder builder, Offset<Monopoly.Schema.Rank>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRanksVectorBlock(FlatBufferBuilder builder, Offset<Monopoly.Schema.Rank>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRanksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Monopoly.Schema.AnnounceGameOverPayload> EndAnnounceGameOverPayload(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.AnnounceGameOverPayload>(o);
  }
};


}
