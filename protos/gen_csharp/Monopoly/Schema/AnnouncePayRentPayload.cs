// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AnnouncePayRentPayload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AnnouncePayRentPayload GetRootAsAnnouncePayRentPayload(ByteBuffer _bb) { return GetRootAsAnnouncePayRentPayload(_bb, new AnnouncePayRentPayload()); }
  public static AnnouncePayRentPayload GetRootAsAnnouncePayRentPayload(ByteBuffer _bb, AnnouncePayRentPayload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnnouncePayRentPayload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Payer { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPayerBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPayerBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPayerArray() { return __p.__vector_as_array<byte>(4); }
  public Monopoly.Schema.Payment? Payments(int j) { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.Payment?)(new Monopoly.Schema.Payment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PaymentsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MyCurrentMoney { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Monopoly.Schema.AnnouncePayRentPayload> CreateAnnouncePayRentPayload(FlatBufferBuilder builder,
      StringOffset payerOffset = default(StringOffset),
      VectorOffset paymentsOffset = default(VectorOffset),
      int my_current_money = 0) {
    builder.StartTable(3);
    AnnouncePayRentPayload.AddMyCurrentMoney(builder, my_current_money);
    AnnouncePayRentPayload.AddPayments(builder, paymentsOffset);
    AnnouncePayRentPayload.AddPayer(builder, payerOffset);
    return AnnouncePayRentPayload.EndAnnouncePayRentPayload(builder);
  }

  public static void StartAnnouncePayRentPayload(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPayer(FlatBufferBuilder builder, StringOffset payerOffset) { builder.AddOffset(0, payerOffset.Value, 0); }
  public static void AddPayments(FlatBufferBuilder builder, VectorOffset paymentsOffset) { builder.AddOffset(1, paymentsOffset.Value, 0); }
  public static VectorOffset CreatePaymentsVector(FlatBufferBuilder builder, Offset<Monopoly.Schema.Payment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePaymentsVectorBlock(FlatBufferBuilder builder, Offset<Monopoly.Schema.Payment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPaymentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMyCurrentMoney(FlatBufferBuilder builder, int myCurrentMoney) { builder.AddInt(2, myCurrentMoney, 0); }
  public static Offset<Monopoly.Schema.AnnouncePayRentPayload> EndAnnouncePayRentPayload(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.AnnouncePayRentPayload>(o);
  }
};


}
