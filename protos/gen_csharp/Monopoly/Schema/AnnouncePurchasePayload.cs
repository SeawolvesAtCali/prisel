// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AnnouncePurchasePayload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AnnouncePurchasePayload GetRootAsAnnouncePurchasePayload(ByteBuffer _bb) { return GetRootAsAnnouncePurchasePayload(_bb, new AnnouncePurchasePayload()); }
  public static AnnouncePurchasePayload GetRootAsAnnouncePurchasePayload(ByteBuffer _bb, AnnouncePurchasePayload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnnouncePurchasePayload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Player { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerArray() { return __p.__vector_as_array<byte>(4); }
  public Monopoly.Schema.PropertyInfo? Property { get { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.PropertyInfo?)(new Monopoly.Schema.PropertyInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Monopoly.Schema.AnnouncePurchasePayload> CreateAnnouncePurchasePayload(FlatBufferBuilder builder,
      StringOffset playerOffset = default(StringOffset),
      Offset<Monopoly.Schema.PropertyInfo> propertyOffset = default(Offset<Monopoly.Schema.PropertyInfo>)) {
    builder.StartTable(2);
    AnnouncePurchasePayload.AddProperty(builder, propertyOffset);
    AnnouncePurchasePayload.AddPlayer(builder, playerOffset);
    return AnnouncePurchasePayload.EndAnnouncePurchasePayload(builder);
  }

  public static void StartAnnouncePurchasePayload(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayer(FlatBufferBuilder builder, StringOffset playerOffset) { builder.AddOffset(0, playerOffset.Value, 0); }
  public static void AddProperty(FlatBufferBuilder builder, Offset<Monopoly.Schema.PropertyInfo> propertyOffset) { builder.AddOffset(1, propertyOffset.Value, 0); }
  public static Offset<Monopoly.Schema.AnnouncePurchasePayload> EndAnnouncePurchasePayload(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.AnnouncePurchasePayload>(o);
  }
};


}
