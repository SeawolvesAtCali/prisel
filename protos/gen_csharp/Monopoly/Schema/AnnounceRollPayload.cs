// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AnnounceRollPayload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AnnounceRollPayload GetRootAsAnnounceRollPayload(ByteBuffer _bb) { return GetRootAsAnnounceRollPayload(_bb, new AnnounceRollPayload()); }
  public static AnnounceRollPayload GetRootAsAnnounceRollPayload(ByteBuffer _bb, AnnounceRollPayload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnnounceRollPayload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Player { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerArray() { return __p.__vector_as_array<byte>(4); }
  public int Steps { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Monopoly.Schema.Coordinate? CurrentPosition { get { int o = __p.__offset(8); return o != 0 ? (Monopoly.Schema.Coordinate?)(new Monopoly.Schema.Coordinate()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int MyMoney { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Monopoly.Schema.AnnounceRollPayload> CreateAnnounceRollPayload(FlatBufferBuilder builder,
      StringOffset playerOffset = default(StringOffset),
      int steps = 0,
      Offset<Monopoly.Schema.Coordinate> current_positionOffset = default(Offset<Monopoly.Schema.Coordinate>),
      int my_money = 0) {
    builder.StartTable(4);
    AnnounceRollPayload.AddMyMoney(builder, my_money);
    AnnounceRollPayload.AddCurrentPosition(builder, current_positionOffset);
    AnnounceRollPayload.AddSteps(builder, steps);
    AnnounceRollPayload.AddPlayer(builder, playerOffset);
    return AnnounceRollPayload.EndAnnounceRollPayload(builder);
  }

  public static void StartAnnounceRollPayload(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPlayer(FlatBufferBuilder builder, StringOffset playerOffset) { builder.AddOffset(0, playerOffset.Value, 0); }
  public static void AddSteps(FlatBufferBuilder builder, int steps) { builder.AddInt(1, steps, 0); }
  public static void AddCurrentPosition(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate> currentPositionOffset) { builder.AddOffset(2, currentPositionOffset.Value, 0); }
  public static void AddMyMoney(FlatBufferBuilder builder, int myMoney) { builder.AddInt(3, myMoney, 0); }
  public static Offset<Monopoly.Schema.AnnounceRollPayload> EndAnnounceRollPayload(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.AnnounceRollPayload>(o);
  }
};


}
