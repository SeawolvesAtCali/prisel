// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Asset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Asset GetRootAsAsset(ByteBuffer _bb) { return GetRootAsAsset(_bb, new Asset()); }
  public static Asset GetRootAsAsset(ByteBuffer _bb, Asset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Asset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Cash { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PropertyWorth { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Total { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Monopoly.Schema.Asset> CreateAsset(FlatBufferBuilder builder,
      int cash = 0,
      int property_worth = 0,
      int total = 0) {
    builder.StartTable(3);
    Asset.AddTotal(builder, total);
    Asset.AddPropertyWorth(builder, property_worth);
    Asset.AddCash(builder, cash);
    return Asset.EndAsset(builder);
  }

  public static void StartAsset(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCash(FlatBufferBuilder builder, int cash) { builder.AddInt(0, cash, 0); }
  public static void AddPropertyWorth(FlatBufferBuilder builder, int propertyWorth) { builder.AddInt(1, propertyWorth, 0); }
  public static void AddTotal(FlatBufferBuilder builder, int total) { builder.AddInt(2, total, 0); }
  public static Offset<Monopoly.Schema.Asset> EndAsset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.Asset>(o);
  }
};


}
