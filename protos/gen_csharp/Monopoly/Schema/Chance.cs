// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Chance : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Chance GetRootAsChance(ByteBuffer _bb) { return GetRootAsChance(_bb, new Chance()); }
  public static Chance GetRootAsChance(ByteBuffer _bb, Chance obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Chance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.ChanceDisplay? Display { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.ChanceDisplay?)(new Monopoly.Schema.ChanceDisplay()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Monopoly.Schema.ChanceExtra ExtraType { get { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.ChanceExtra)__p.bb.Get(o + __p.bb_pos) : Monopoly.Schema.ChanceExtra.NONE; } }
  public TTable? Extra<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Monopoly.Schema.MoveToTileExtra ExtraAsMonopoly_Schema_MoveToTileExtra() { return Extra<Monopoly.Schema.MoveToTileExtra>().Value; }
  public Monopoly.Schema.MoneyExchangeExtra ExtraAsMonopoly_Schema_MoneyExchangeExtra() { return Extra<Monopoly.Schema.MoneyExchangeExtra>().Value; }
  public Monopoly.Schema.MoveStepsExtra ExtraAsMonopoly_Schema_MoveStepsExtra() { return Extra<Monopoly.Schema.MoveStepsExtra>().Value; }
  public Monopoly.Schema.CollectibleExtra ExtraAsMonopoly_Schema_CollectibleExtra() { return Extra<Monopoly.Schema.CollectibleExtra>().Value; }

  public static Offset<Monopoly.Schema.Chance> CreateChance(FlatBufferBuilder builder,
      Offset<Monopoly.Schema.ChanceDisplay> displayOffset = default(Offset<Monopoly.Schema.ChanceDisplay>),
      Monopoly.Schema.ChanceExtra extra_type = Monopoly.Schema.ChanceExtra.NONE,
      int extraOffset = 0) {
    builder.StartTable(3);
    Chance.AddExtra(builder, extraOffset);
    Chance.AddDisplay(builder, displayOffset);
    Chance.AddExtraType(builder, extra_type);
    return Chance.EndChance(builder);
  }

  public static void StartChance(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddDisplay(FlatBufferBuilder builder, Offset<Monopoly.Schema.ChanceDisplay> displayOffset) { builder.AddOffset(0, displayOffset.Value, 0); }
  public static void AddExtraType(FlatBufferBuilder builder, Monopoly.Schema.ChanceExtra extraType) { builder.AddByte(1, (byte)extraType, 0); }
  public static void AddExtra(FlatBufferBuilder builder, int extraOffset) { builder.AddOffset(2, extraOffset, 0); }
  public static Offset<Monopoly.Schema.Chance> EndChance(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.Chance>(o);
  }
};


}
