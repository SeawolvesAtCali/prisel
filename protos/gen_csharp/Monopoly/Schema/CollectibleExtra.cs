// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CollectibleExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CollectibleExtra GetRootAsCollectibleExtra(ByteBuffer _bb) { return GetRootAsCollectibleExtra(_bb, new CollectibleExtra()); }
  public static CollectibleExtra GetRootAsCollectibleExtra(ByteBuffer _bb, CollectibleExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CollectibleExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.CollectibleType Type { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.CollectibleType)__p.bb.GetInt(o + __p.bb_pos) : Monopoly.Schema.CollectibleType.UNSPECIFIED; } }

  public static Offset<Monopoly.Schema.CollectibleExtra> CreateCollectibleExtra(FlatBufferBuilder builder,
      Monopoly.Schema.CollectibleType type = Monopoly.Schema.CollectibleType.UNSPECIFIED) {
    builder.StartTable(1);
    CollectibleExtra.AddType(builder, type);
    return CollectibleExtra.EndCollectibleExtra(builder);
  }

  public static void StartCollectibleExtra(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddType(FlatBufferBuilder builder, Monopoly.Schema.CollectibleType type) { builder.AddInt(0, (int)type, 0); }
  public static Offset<Monopoly.Schema.CollectibleExtra> EndCollectibleExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.CollectibleExtra>(o);
  }
};


}
