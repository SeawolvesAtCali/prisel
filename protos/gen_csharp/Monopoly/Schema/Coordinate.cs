// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Coordinate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Coordinate GetRootAsCoordinate(ByteBuffer _bb) { return GetRootAsCoordinate(_bb, new Coordinate()); }
  public static Coordinate GetRootAsCoordinate(ByteBuffer _bb, Coordinate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Coordinate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Row { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Col { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Monopoly.Schema.Coordinate> CreateCoordinate(FlatBufferBuilder builder,
      int row = 0,
      int col = 0) {
    builder.StartTable(2);
    Coordinate.AddCol(builder, col);
    Coordinate.AddRow(builder, row);
    return Coordinate.EndCoordinate(builder);
  }

  public static void StartCoordinate(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRow(FlatBufferBuilder builder, int row) { builder.AddInt(0, row, 0); }
  public static void AddCol(FlatBufferBuilder builder, int col) { builder.AddInt(1, col, 0); }
  public static Offset<Monopoly.Schema.Coordinate> EndCoordinate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.Coordinate>(o);
  }
};


}
