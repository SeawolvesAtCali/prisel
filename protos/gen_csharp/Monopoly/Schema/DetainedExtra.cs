// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DetainedExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static DetainedExtra GetRootAsDetainedExtra(ByteBuffer _bb) { return GetRootAsDetainedExtra(_bb, new DetainedExtra()); }
  public static DetainedExtra GetRootAsDetainedExtra(ByteBuffer _bb, DetainedExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DetainedExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.DetainedType Type { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.DetainedType)__p.bb.GetInt(o + __p.bb_pos) : Monopoly.Schema.DetainedType.UNSPECIFIED; } }
  public int Length { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Monopoly.Schema.DetainedExtra> CreateDetainedExtra(FlatBufferBuilder builder,
      Monopoly.Schema.DetainedType type = Monopoly.Schema.DetainedType.UNSPECIFIED,
      int length = 0) {
    builder.StartTable(2);
    DetainedExtra.AddLength(builder, length);
    DetainedExtra.AddType(builder, type);
    return DetainedExtra.EndDetainedExtra(builder);
  }

  public static void StartDetainedExtra(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, Monopoly.Schema.DetainedType type) { builder.AddInt(0, (int)type, 0); }
  public static void AddLength(FlatBufferBuilder builder, int length) { builder.AddInt(1, length, 0); }
  public static Offset<Monopoly.Schema.DetainedExtra> EndDetainedExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.DetainedExtra>(o);
  }
};


}
