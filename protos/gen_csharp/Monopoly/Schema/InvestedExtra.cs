// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct InvestedExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static InvestedExtra GetRootAsInvestedExtra(ByteBuffer _bb) { return GetRootAsInvestedExtra(_bb, new InvestedExtra()); }
  public static InvestedExtra GetRootAsInvestedExtra(ByteBuffer _bb, InvestedExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InvestedExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.PropertyInfo? Property { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.PropertyInfo?)(new Monopoly.Schema.PropertyInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Monopoly.Schema.InvestedExtra> CreateInvestedExtra(FlatBufferBuilder builder,
      Offset<Monopoly.Schema.PropertyInfo> propertyOffset = default(Offset<Monopoly.Schema.PropertyInfo>)) {
    builder.StartTable(1);
    InvestedExtra.AddProperty(builder, propertyOffset);
    return InvestedExtra.EndInvestedExtra(builder);
  }

  public static void StartInvestedExtra(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddProperty(FlatBufferBuilder builder, Offset<Monopoly.Schema.PropertyInfo> propertyOffset) { builder.AddOffset(0, propertyOffset.Value, 0); }
  public static Offset<Monopoly.Schema.InvestedExtra> EndInvestedExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.InvestedExtra>(o);
  }
};


}
