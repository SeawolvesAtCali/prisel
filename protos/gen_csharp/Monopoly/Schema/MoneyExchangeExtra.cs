// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MoneyExchangeExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MoneyExchangeExtra GetRootAsMoneyExchangeExtra(ByteBuffer _bb) { return GetRootAsMoneyExchangeExtra(_bb, new MoneyExchangeExtra()); }
  public static MoneyExchangeExtra GetRootAsMoneyExchangeExtra(ByteBuffer _bb, MoneyExchangeExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoneyExchangeExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MyCurrentMoney { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Monopoly.Schema.PlayerAmountTuple? Exchanges(int j) { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.PlayerAmountTuple?)(new Monopoly.Schema.PlayerAmountTuple()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ExchangesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Monopoly.Schema.MoneyExchangeExtra> CreateMoneyExchangeExtra(FlatBufferBuilder builder,
      int my_current_money = 0,
      VectorOffset exchangesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MoneyExchangeExtra.AddExchanges(builder, exchangesOffset);
    MoneyExchangeExtra.AddMyCurrentMoney(builder, my_current_money);
    return MoneyExchangeExtra.EndMoneyExchangeExtra(builder);
  }

  public static void StartMoneyExchangeExtra(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMyCurrentMoney(FlatBufferBuilder builder, int myCurrentMoney) { builder.AddInt(0, myCurrentMoney, 0); }
  public static void AddExchanges(FlatBufferBuilder builder, VectorOffset exchangesOffset) { builder.AddOffset(1, exchangesOffset.Value, 0); }
  public static VectorOffset CreateExchangesVector(FlatBufferBuilder builder, Offset<Monopoly.Schema.PlayerAmountTuple>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExchangesVectorBlock(FlatBufferBuilder builder, Offset<Monopoly.Schema.PlayerAmountTuple>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartExchangesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Monopoly.Schema.MoneyExchangeExtra> EndMoneyExchangeExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.MoneyExchangeExtra>(o);
  }
};


}
