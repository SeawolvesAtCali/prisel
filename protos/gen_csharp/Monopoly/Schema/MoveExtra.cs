// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MoveExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MoveExtra GetRootAsMoveExtra(ByteBuffer _bb) { return GetRootAsMoveExtra(_bb, new MoveExtra()); }
  public static MoveExtra GetRootAsMoveExtra(ByteBuffer _bb, MoveExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoveExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.GamePlayer? Player { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.GamePlayer?)(new Monopoly.Schema.GamePlayer()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Monopoly.Schema.Coordinate? Start { get { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.Coordinate?)(new Monopoly.Schema.Coordinate()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Monopoly.Schema.Coordinate? Path(int j) { int o = __p.__offset(8); return o != 0 ? (Monopoly.Schema.Coordinate?)(new Monopoly.Schema.Coordinate()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PathLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Monopoly.Schema.MoveExtra> CreateMoveExtra(FlatBufferBuilder builder,
      Offset<Monopoly.Schema.GamePlayer> playerOffset = default(Offset<Monopoly.Schema.GamePlayer>),
      Offset<Monopoly.Schema.Coordinate> startOffset = default(Offset<Monopoly.Schema.Coordinate>),
      VectorOffset pathOffset = default(VectorOffset)) {
    builder.StartTable(3);
    MoveExtra.AddPath(builder, pathOffset);
    MoveExtra.AddStart(builder, startOffset);
    MoveExtra.AddPlayer(builder, playerOffset);
    return MoveExtra.EndMoveExtra(builder);
  }

  public static void StartMoveExtra(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPlayer(FlatBufferBuilder builder, Offset<Monopoly.Schema.GamePlayer> playerOffset) { builder.AddOffset(0, playerOffset.Value, 0); }
  public static void AddStart(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate> startOffset) { builder.AddOffset(1, startOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, VectorOffset pathOffset) { builder.AddOffset(2, pathOffset.Value, 0); }
  public static VectorOffset CreatePathVector(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Monopoly.Schema.MoveExtra> EndMoveExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.MoveExtra>(o);
  }
};


}
