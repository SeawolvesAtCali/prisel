// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MoveToTileExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MoveToTileExtra GetRootAsMoveToTileExtra(ByteBuffer _bb) { return GetRootAsMoveToTileExtra(_bb, new MoveToTileExtra()); }
  public static MoveToTileExtra GetRootAsMoveToTileExtra(ByteBuffer _bb, MoveToTileExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoveToTileExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.Coordinate? Tile { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.Coordinate?)(new Monopoly.Schema.Coordinate()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool IsTeleport { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Monopoly.Schema.MoveToTileExtra> CreateMoveToTileExtra(FlatBufferBuilder builder,
      Offset<Monopoly.Schema.Coordinate> tileOffset = default(Offset<Monopoly.Schema.Coordinate>),
      bool is_teleport = false) {
    builder.StartTable(2);
    MoveToTileExtra.AddTile(builder, tileOffset);
    MoveToTileExtra.AddIsTeleport(builder, is_teleport);
    return MoveToTileExtra.EndMoveToTileExtra(builder);
  }

  public static void StartMoveToTileExtra(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTile(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate> tileOffset) { builder.AddOffset(0, tileOffset.Value, 0); }
  public static void AddIsTeleport(FlatBufferBuilder builder, bool isTeleport) { builder.AddBool(1, isTeleport, false); }
  public static Offset<Monopoly.Schema.MoveToTileExtra> EndMoveToTileExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.MoveToTileExtra>(o);
  }
};


}
