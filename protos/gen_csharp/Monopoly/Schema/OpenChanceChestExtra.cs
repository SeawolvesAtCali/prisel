// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct OpenChanceChestExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static OpenChanceChestExtra GetRootAsOpenChanceChestExtra(ByteBuffer _bb) { return GetRootAsOpenChanceChestExtra(_bb, new OpenChanceChestExtra()); }
  public static OpenChanceChestExtra GetRootAsOpenChanceChestExtra(ByteBuffer _bb, OpenChanceChestExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OpenChanceChestExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.Coordinate? ChanceChestTile { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.Coordinate?)(new Monopoly.Schema.Coordinate()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Monopoly.Schema.ChanceDisplay? Chance { get { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.ChanceDisplay?)(new Monopoly.Schema.ChanceDisplay()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Monopoly.Schema.OpenChanceChestExtra> CreateOpenChanceChestExtra(FlatBufferBuilder builder,
      Offset<Monopoly.Schema.Coordinate> chance_chest_tileOffset = default(Offset<Monopoly.Schema.Coordinate>),
      Offset<Monopoly.Schema.ChanceDisplay> chanceOffset = default(Offset<Monopoly.Schema.ChanceDisplay>)) {
    builder.StartTable(2);
    OpenChanceChestExtra.AddChance(builder, chanceOffset);
    OpenChanceChestExtra.AddChanceChestTile(builder, chance_chest_tileOffset);
    return OpenChanceChestExtra.EndOpenChanceChestExtra(builder);
  }

  public static void StartOpenChanceChestExtra(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddChanceChestTile(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate> chanceChestTileOffset) { builder.AddOffset(0, chanceChestTileOffset.Value, 0); }
  public static void AddChance(FlatBufferBuilder builder, Offset<Monopoly.Schema.ChanceDisplay> chanceOffset) { builder.AddOffset(1, chanceOffset.Value, 0); }
  public static Offset<Monopoly.Schema.OpenChanceChestExtra> EndOpenChanceChestExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.OpenChanceChestExtra>(o);
  }
};


}
