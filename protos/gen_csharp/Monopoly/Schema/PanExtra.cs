// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PanExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PanExtra GetRootAsPanExtra(ByteBuffer _bb) { return GetRootAsPanExtra(_bb, new PanExtra()); }
  public static PanExtra GetRootAsPanExtra(ByteBuffer _bb, PanExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PanExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.Coordinate? Target { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.Coordinate?)(new Monopoly.Schema.Coordinate()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Monopoly.Schema.PanExtra> CreatePanExtra(FlatBufferBuilder builder,
      Offset<Monopoly.Schema.Coordinate> targetOffset = default(Offset<Monopoly.Schema.Coordinate>)) {
    builder.StartTable(1);
    PanExtra.AddTarget(builder, targetOffset);
    return PanExtra.EndPanExtra(builder);
  }

  public static void StartPanExtra(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTarget(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate> targetOffset) { builder.AddOffset(0, targetOffset.Value, 0); }
  public static Offset<Monopoly.Schema.PanExtra> EndPanExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.PanExtra>(o);
  }
};


}
