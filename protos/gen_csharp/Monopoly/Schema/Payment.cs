// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Payment : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Payment GetRootAsPayment(ByteBuffer _bb) { return GetRootAsPayment(_bb, new Payment()); }
  public static Payment GetRootAsPayment(ByteBuffer _bb, Payment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Payment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Payee { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPayeeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPayeeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPayeeArray() { return __p.__vector_as_array<byte>(4); }
  public string Payer { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPayerBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPayerBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPayerArray() { return __p.__vector_as_array<byte>(6); }
  public int Amount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Monopoly.Schema.PropertyInfo? ForProperty { get { int o = __p.__offset(10); return o != 0 ? (Monopoly.Schema.PropertyInfo?)(new Monopoly.Schema.PropertyInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Monopoly.Schema.Payment> CreatePayment(FlatBufferBuilder builder,
      StringOffset payeeOffset = default(StringOffset),
      StringOffset payerOffset = default(StringOffset),
      int amount = 0,
      Offset<Monopoly.Schema.PropertyInfo> for_propertyOffset = default(Offset<Monopoly.Schema.PropertyInfo>)) {
    builder.StartTable(4);
    Payment.AddForProperty(builder, for_propertyOffset);
    Payment.AddAmount(builder, amount);
    Payment.AddPayer(builder, payerOffset);
    Payment.AddPayee(builder, payeeOffset);
    return Payment.EndPayment(builder);
  }

  public static void StartPayment(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPayee(FlatBufferBuilder builder, StringOffset payeeOffset) { builder.AddOffset(0, payeeOffset.Value, 0); }
  public static void AddPayer(FlatBufferBuilder builder, StringOffset payerOffset) { builder.AddOffset(1, payerOffset.Value, 0); }
  public static void AddAmount(FlatBufferBuilder builder, int amount) { builder.AddInt(2, amount, 0); }
  public static void AddForProperty(FlatBufferBuilder builder, Offset<Monopoly.Schema.PropertyInfo> forPropertyOffset) { builder.AddOffset(3, forPropertyOffset.Value, 0); }
  public static Offset<Monopoly.Schema.Payment> EndPayment(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.Payment>(o);
  }
};


}
