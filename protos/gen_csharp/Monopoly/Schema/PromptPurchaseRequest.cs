// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PromptPurchaseRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PromptPurchaseRequest GetRootAsPromptPurchaseRequest(ByteBuffer _bb) { return GetRootAsPromptPurchaseRequest(_bb, new PromptPurchaseRequest()); }
  public static PromptPurchaseRequest GetRootAsPromptPurchaseRequest(ByteBuffer _bb, PromptPurchaseRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PromptPurchaseRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.PropertyInfo? Property { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.PropertyInfo?)(new Monopoly.Schema.PropertyInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Monopoly.Schema.PropertyLevel? Levels(int j) { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.PropertyLevel?)(new Monopoly.Schema.PropertyLevel()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LevelsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsUpgrade { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int MoneyAfterPurchase { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Monopoly.Schema.PromptPurchaseRequest> CreatePromptPurchaseRequest(FlatBufferBuilder builder,
      Offset<Monopoly.Schema.PropertyInfo> propertyOffset = default(Offset<Monopoly.Schema.PropertyInfo>),
      VectorOffset levelsOffset = default(VectorOffset),
      bool is_upgrade = false,
      int money_after_purchase = 0) {
    builder.StartTable(4);
    PromptPurchaseRequest.AddMoneyAfterPurchase(builder, money_after_purchase);
    PromptPurchaseRequest.AddLevels(builder, levelsOffset);
    PromptPurchaseRequest.AddProperty(builder, propertyOffset);
    PromptPurchaseRequest.AddIsUpgrade(builder, is_upgrade);
    return PromptPurchaseRequest.EndPromptPurchaseRequest(builder);
  }

  public static void StartPromptPurchaseRequest(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddProperty(FlatBufferBuilder builder, Offset<Monopoly.Schema.PropertyInfo> propertyOffset) { builder.AddOffset(0, propertyOffset.Value, 0); }
  public static void AddLevels(FlatBufferBuilder builder, VectorOffset levelsOffset) { builder.AddOffset(1, levelsOffset.Value, 0); }
  public static VectorOffset CreateLevelsVector(FlatBufferBuilder builder, Offset<Monopoly.Schema.PropertyLevel>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLevelsVectorBlock(FlatBufferBuilder builder, Offset<Monopoly.Schema.PropertyLevel>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLevelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsUpgrade(FlatBufferBuilder builder, bool isUpgrade) { builder.AddBool(2, isUpgrade, false); }
  public static void AddMoneyAfterPurchase(FlatBufferBuilder builder, int moneyAfterPurchase) { builder.AddInt(3, moneyAfterPurchase, 0); }
  public static Offset<Monopoly.Schema.PromptPurchaseRequest> EndPromptPurchaseRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.PromptPurchaseRequest>(o);
  }
};


}
