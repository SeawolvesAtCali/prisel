// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PropertyInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PropertyInfo GetRootAsPropertyInfo(ByteBuffer _bb) { return GetRootAsPropertyInfo(_bb, new PropertyInfo()); }
  public static PropertyInfo GetRootAsPropertyInfo(ByteBuffer _bb, PropertyInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PropertyInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CurrentLevel { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rent { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public Monopoly.Schema.Coordinate? Pos { get { int o = __p.__offset(12); return o != 0 ? (Monopoly.Schema.Coordinate?)(new Monopoly.Schema.Coordinate()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Monopoly.Schema.PropertyInfo> CreatePropertyInfo(FlatBufferBuilder builder,
      int current_level = 0,
      int cost = 0,
      int rent = 0,
      StringOffset nameOffset = default(StringOffset),
      Offset<Monopoly.Schema.Coordinate> posOffset = default(Offset<Monopoly.Schema.Coordinate>)) {
    builder.StartTable(5);
    PropertyInfo.AddPos(builder, posOffset);
    PropertyInfo.AddName(builder, nameOffset);
    PropertyInfo.AddRent(builder, rent);
    PropertyInfo.AddCost(builder, cost);
    PropertyInfo.AddCurrentLevel(builder, current_level);
    return PropertyInfo.EndPropertyInfo(builder);
  }

  public static void StartPropertyInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddCurrentLevel(FlatBufferBuilder builder, int currentLevel) { builder.AddInt(0, currentLevel, 0); }
  public static void AddCost(FlatBufferBuilder builder, int cost) { builder.AddInt(1, cost, 0); }
  public static void AddRent(FlatBufferBuilder builder, int rent) { builder.AddInt(2, rent, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate> posOffset) { builder.AddOffset(4, posOffset.Value, 0); }
  public static Offset<Monopoly.Schema.PropertyInfo> EndPropertyInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.PropertyInfo>(o);
  }
};


}
