// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PropertyLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PropertyLevel GetRootAsPropertyLevel(ByteBuffer _bb) { return GetRootAsPropertyLevel(_bb, new PropertyLevel()); }
  public static PropertyLevel GetRootAsPropertyLevel(ByteBuffer _bb, PropertyLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PropertyLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Cost { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rent { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Monopoly.Schema.PropertyLevel> CreatePropertyLevel(FlatBufferBuilder builder,
      int cost = 0,
      int rent = 0) {
    builder.StartTable(2);
    PropertyLevel.AddRent(builder, rent);
    PropertyLevel.AddCost(builder, cost);
    return PropertyLevel.EndPropertyLevel(builder);
  }

  public static void StartPropertyLevel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCost(FlatBufferBuilder builder, int cost) { builder.AddInt(0, cost, 0); }
  public static void AddRent(FlatBufferBuilder builder, int rent) { builder.AddInt(1, rent, 0); }
  public static Offset<Monopoly.Schema.PropertyLevel> EndPropertyLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.PropertyLevel>(o);
  }
};


}
