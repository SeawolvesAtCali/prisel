// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TeleportPickupExtra : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TeleportPickupExtra GetRootAsTeleportPickupExtra(ByteBuffer _bb) { return GetRootAsTeleportPickupExtra(_bb, new TeleportPickupExtra()); }
  public static TeleportPickupExtra GetRootAsTeleportPickupExtra(ByteBuffer _bb, TeleportPickupExtra obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TeleportPickupExtra __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Monopoly.Schema.TeleportVehicle Vehicle { get { int o = __p.__offset(4); return o != 0 ? (Monopoly.Schema.TeleportVehicle)__p.bb.GetInt(o + __p.bb_pos) : Monopoly.Schema.TeleportVehicle.UNSPECIFIED; } }
  public Monopoly.Schema.Coordinate? PickupLocation { get { int o = __p.__offset(6); return o != 0 ? (Monopoly.Schema.Coordinate?)(new Monopoly.Schema.Coordinate()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Monopoly.Schema.GamePlayer? Player { get { int o = __p.__offset(8); return o != 0 ? (Monopoly.Schema.GamePlayer?)(new Monopoly.Schema.GamePlayer()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Monopoly.Schema.TeleportPickupExtra> CreateTeleportPickupExtra(FlatBufferBuilder builder,
      Monopoly.Schema.TeleportVehicle vehicle = Monopoly.Schema.TeleportVehicle.UNSPECIFIED,
      Offset<Monopoly.Schema.Coordinate> pickup_locationOffset = default(Offset<Monopoly.Schema.Coordinate>),
      Offset<Monopoly.Schema.GamePlayer> playerOffset = default(Offset<Monopoly.Schema.GamePlayer>)) {
    builder.StartTable(3);
    TeleportPickupExtra.AddPlayer(builder, playerOffset);
    TeleportPickupExtra.AddPickupLocation(builder, pickup_locationOffset);
    TeleportPickupExtra.AddVehicle(builder, vehicle);
    return TeleportPickupExtra.EndTeleportPickupExtra(builder);
  }

  public static void StartTeleportPickupExtra(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddVehicle(FlatBufferBuilder builder, Monopoly.Schema.TeleportVehicle vehicle) { builder.AddInt(0, (int)vehicle, 0); }
  public static void AddPickupLocation(FlatBufferBuilder builder, Offset<Monopoly.Schema.Coordinate> pickupLocationOffset) { builder.AddOffset(1, pickupLocationOffset.Value, 0); }
  public static void AddPlayer(FlatBufferBuilder builder, Offset<Monopoly.Schema.GamePlayer> playerOffset) { builder.AddOffset(2, playerOffset.Value, 0); }
  public static Offset<Monopoly.Schema.TeleportPickupExtra> EndTeleportPickupExtra(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.TeleportPickupExtra>(o);
  }
};


}
