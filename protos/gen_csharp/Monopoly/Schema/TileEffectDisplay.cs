// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Monopoly.Schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TileEffectDisplay : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TileEffectDisplay GetRootAsTileEffectDisplay(ByteBuffer _bb) { return GetRootAsTileEffectDisplay(_bb, new TileEffectDisplay()); }
  public static TileEffectDisplay GetRootAsTileEffectDisplay(ByteBuffer _bb, TileEffectDisplay obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TileEffectDisplay __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Title { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(4); }
  public string Description { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Monopoly.Schema.TileEffectDisplay> CreateTileEffectDisplay(FlatBufferBuilder builder,
      StringOffset titleOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset)) {
    builder.StartTable(2);
    TileEffectDisplay.AddDescription(builder, descriptionOffset);
    TileEffectDisplay.AddTitle(builder, titleOffset);
    return TileEffectDisplay.EndTileEffectDisplay(builder);
  }

  public static void StartTileEffectDisplay(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(0, titleOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(1, descriptionOffset.Value, 0); }
  public static Offset<Monopoly.Schema.TileEffectDisplay> EndTileEffectDisplay(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Monopoly.Schema.TileEffectDisplay>(o);
  }
};


}
