// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Prisel.Common
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PlayerLeaveInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PlayerLeaveInfo GetRootAsPlayerLeaveInfo(ByteBuffer _bb) { return GetRootAsPlayerLeaveInfo(_bb, new PlayerLeaveInfo()); }
  public static PlayerLeaveInfo GetRootAsPlayerLeaveInfo(ByteBuffer _bb, PlayerLeaveInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerLeaveInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Prisel.Common.PlayerLeaveInfo> CreatePlayerLeaveInfo(FlatBufferBuilder builder,
      StringOffset player_idOffset = default(StringOffset)) {
    builder.StartTable(1);
    PlayerLeaveInfo.AddPlayerId(builder, player_idOffset);
    return PlayerLeaveInfo.EndPlayerLeaveInfo(builder);
  }

  public static void StartPlayerLeaveInfo(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(0, playerIdOffset.Value, 0); }
  public static Offset<Prisel.Common.PlayerLeaveInfo> EndPlayerLeaveInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Prisel.Common.PlayerLeaveInfo>(o);
  }
};


}
