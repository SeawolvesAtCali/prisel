// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TicTacToe
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GameStatePayload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static GameStatePayload GetRootAsGameStatePayload(ByteBuffer _bb) { return GetRootAsGameStatePayload(_bb, new GameStatePayload()); }
  public static GameStatePayload GetRootAsGameStatePayload(ByteBuffer _bb, GameStatePayload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameStatePayload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Prisel.Common.PlayerInfo? Player(int j) { int o = __p.__offset(4); return o != 0 ? (Prisel.Common.PlayerInfo?)(new Prisel.Common.PlayerInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayerLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Map(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MapLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint CurrentPlayer { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Winner { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWinnerBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetWinnerBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetWinnerArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<TicTacToe.GameStatePayload> CreateGameStatePayload(FlatBufferBuilder builder,
      VectorOffset playerOffset = default(VectorOffset),
      VectorOffset mapOffset = default(VectorOffset),
      uint current_player = 0,
      StringOffset winnerOffset = default(StringOffset)) {
    builder.StartTable(4);
    GameStatePayload.AddWinner(builder, winnerOffset);
    GameStatePayload.AddCurrentPlayer(builder, current_player);
    GameStatePayload.AddMap(builder, mapOffset);
    GameStatePayload.AddPlayer(builder, playerOffset);
    return GameStatePayload.EndGameStatePayload(builder);
  }

  public static void StartGameStatePayload(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPlayer(FlatBufferBuilder builder, VectorOffset playerOffset) { builder.AddOffset(0, playerOffset.Value, 0); }
  public static VectorOffset CreatePlayerVector(FlatBufferBuilder builder, Offset<Prisel.Common.PlayerInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayerVectorBlock(FlatBufferBuilder builder, Offset<Prisel.Common.PlayerInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlayerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMap(FlatBufferBuilder builder, VectorOffset mapOffset) { builder.AddOffset(1, mapOffset.Value, 0); }
  public static VectorOffset CreateMapVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMapVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCurrentPlayer(FlatBufferBuilder builder, uint currentPlayer) { builder.AddUint(2, currentPlayer, 0); }
  public static void AddWinner(FlatBufferBuilder builder, StringOffset winnerOffset) { builder.AddOffset(3, winnerOffset.Value, 0); }
  public static Offset<TicTacToe.GameStatePayload> EndGameStatePayload(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TicTacToe.GameStatePayload>(o);
  }
};


}
