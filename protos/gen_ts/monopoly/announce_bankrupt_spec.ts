// @generated by protobuf-ts 2.1.0 with parameter force_client_none
// @generated from protobuf file "monopoly/announce_bankrupt_spec.proto" (package "monopoly", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * type : "announce_bankrupt"
 * packet_type : D
 *
 * @generated from protobuf message monopoly.AnnounceBankruptPayload
 */
export interface AnnounceBankruptPayload {
    /**
     * @generated from protobuf field: string player = 1;
     */
    player: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AnnounceBankruptPayload$Type extends MessageType<AnnounceBankruptPayload> {
    constructor() {
        super("monopoly.AnnounceBankruptPayload", [
            { no: 1, name: "player", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AnnounceBankruptPayload>): AnnounceBankruptPayload {
        const message = { player: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnnounceBankruptPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnnounceBankruptPayload): AnnounceBankruptPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player */ 1:
                    message.player = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnnounceBankruptPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string player = 1; */
        if (message.player !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.player);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.AnnounceBankruptPayload
 */
export const AnnounceBankruptPayload = new AnnounceBankruptPayload$Type();
