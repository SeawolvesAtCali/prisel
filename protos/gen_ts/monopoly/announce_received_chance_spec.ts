// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "monopoly/announce_received_chance_spec.proto" (package "monopoly", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Chance } from "./chance";
/**
 * TODO: this seems useless. There is already animation for showing chance chest
 * open/close.
 * type : "announce_received_chance"
 * packet_type : DEFAULT
 *
 * @generated from protobuf message monopoly.AnnounceRecievedChancePayload
 */
export interface AnnounceRecievedChancePayload {
    /**
     * @generated from protobuf field: string player = 1;
     */
    player: string;
    /**
     * @generated from protobuf field: monopoly.Chance chance = 2;
     */
    chance?: Chance;
}
/**
 * Type for protobuf message monopoly.AnnounceRecievedChancePayload
 */
class AnnounceRecievedChancePayload$Type extends MessageType<AnnounceRecievedChancePayload> {
    constructor() {
        super("monopoly.AnnounceRecievedChancePayload", [
            { no: 1, name: "player", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chance", kind: "message", T: () => Chance }
        ]);
    }
    create(value?: PartialMessage<AnnounceRecievedChancePayload>): AnnounceRecievedChancePayload {
        const message = { player: "" };
        if (value !== undefined)
            reflectionMergePartial<AnnounceRecievedChancePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnnounceRecievedChancePayload): AnnounceRecievedChancePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player */ 1:
                    message.player = reader.string();
                    break;
                case /* monopoly.Chance chance */ 2:
                    message.chance = Chance.internalBinaryRead(reader, reader.uint32(), options, message.chance);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnnounceRecievedChancePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string player = 1; */
        if (message.player !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.player);
        /* monopoly.Chance chance = 2; */
        if (message.chance)
            Chance.internalBinaryWrite(message.chance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const AnnounceRecievedChancePayload = new AnnounceRecievedChancePayload$Type();
