// @generated by protobuf-ts 2.1.0 with parameter force_client_none
// @generated from protobuf file "monopoly/chance.proto" (package "monopoly", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CollectibleExtra } from "./collectible_extra";
import { MoveStepsExtra } from "./move_steps_extra";
import { MoneyExchangeExtra } from "./money_exchange_extra";
import { MoveToTileExtra } from "./move_to_tile_extra";
/**
 * @generated from protobuf message monopoly.ChanceDisplay
 */
export interface ChanceDisplay {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: optional string image = 3;
     */
    image?: string;
}
/**
 * @generated from protobuf message monopoly.Chance
 */
export interface Chance {
    /**
     * @generated from protobuf field: monopoly.ChanceDisplay display = 1;
     */
    display?: ChanceDisplay;
    /**
     * @generated from protobuf oneof: extra
     */
    extra: {
        oneofKind: "unspecified";
        /**
         * @generated from protobuf field: bool unspecified = 2;
         */
        unspecified: boolean;
    } | {
        oneofKind: "moveToTile";
        /**
         * @generated from protobuf field: monopoly.MoveToTileExtra move_to_tile = 3;
         */
        moveToTile: MoveToTileExtra;
    } | {
        oneofKind: "moneyExchange";
        /**
         * @generated from protobuf field: monopoly.MoneyExchangeExtra money_exchange = 4;
         */
        moneyExchange: MoneyExchangeExtra;
    } | {
        oneofKind: "moveSteps";
        /**
         * @generated from protobuf field: monopoly.MoveStepsExtra move_steps = 5;
         */
        moveSteps: MoveStepsExtra;
    } | {
        oneofKind: "collectible";
        /**
         * @generated from protobuf field: monopoly.CollectibleExtra collectible = 6;
         */
        collectible: CollectibleExtra;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ChanceDisplay$Type extends MessageType<ChanceDisplay> {
    constructor() {
        super("monopoly.ChanceDisplay", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChanceDisplay>): ChanceDisplay {
        const message = { title: "", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChanceDisplay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChanceDisplay): ChanceDisplay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* optional string image */ 3:
                    message.image = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChanceDisplay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* optional string image = 3; */
        if (message.image !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.ChanceDisplay
 */
export const ChanceDisplay = new ChanceDisplay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Chance$Type extends MessageType<Chance> {
    constructor() {
        super("monopoly.Chance", [
            { no: 1, name: "display", kind: "message", T: () => ChanceDisplay },
            { no: 2, name: "unspecified", kind: "scalar", oneof: "extra", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "move_to_tile", kind: "message", oneof: "extra", T: () => MoveToTileExtra },
            { no: 4, name: "money_exchange", kind: "message", oneof: "extra", T: () => MoneyExchangeExtra },
            { no: 5, name: "move_steps", kind: "message", oneof: "extra", T: () => MoveStepsExtra },
            { no: 6, name: "collectible", kind: "message", oneof: "extra", T: () => CollectibleExtra }
        ]);
    }
    create(value?: PartialMessage<Chance>): Chance {
        const message = { extra: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Chance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Chance): Chance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* monopoly.ChanceDisplay display */ 1:
                    message.display = ChanceDisplay.internalBinaryRead(reader, reader.uint32(), options, message.display);
                    break;
                case /* bool unspecified */ 2:
                    message.extra = {
                        oneofKind: "unspecified",
                        unspecified: reader.bool()
                    };
                    break;
                case /* monopoly.MoveToTileExtra move_to_tile */ 3:
                    message.extra = {
                        oneofKind: "moveToTile",
                        moveToTile: MoveToTileExtra.internalBinaryRead(reader, reader.uint32(), options, (message.extra as any).moveToTile)
                    };
                    break;
                case /* monopoly.MoneyExchangeExtra money_exchange */ 4:
                    message.extra = {
                        oneofKind: "moneyExchange",
                        moneyExchange: MoneyExchangeExtra.internalBinaryRead(reader, reader.uint32(), options, (message.extra as any).moneyExchange)
                    };
                    break;
                case /* monopoly.MoveStepsExtra move_steps */ 5:
                    message.extra = {
                        oneofKind: "moveSteps",
                        moveSteps: MoveStepsExtra.internalBinaryRead(reader, reader.uint32(), options, (message.extra as any).moveSteps)
                    };
                    break;
                case /* monopoly.CollectibleExtra collectible */ 6:
                    message.extra = {
                        oneofKind: "collectible",
                        collectible: CollectibleExtra.internalBinaryRead(reader, reader.uint32(), options, (message.extra as any).collectible)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Chance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* monopoly.ChanceDisplay display = 1; */
        if (message.display)
            ChanceDisplay.internalBinaryWrite(message.display, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool unspecified = 2; */
        if (message.extra.oneofKind === "unspecified")
            writer.tag(2, WireType.Varint).bool(message.extra.unspecified);
        /* monopoly.MoveToTileExtra move_to_tile = 3; */
        if (message.extra.oneofKind === "moveToTile")
            MoveToTileExtra.internalBinaryWrite(message.extra.moveToTile, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* monopoly.MoneyExchangeExtra money_exchange = 4; */
        if (message.extra.oneofKind === "moneyExchange")
            MoneyExchangeExtra.internalBinaryWrite(message.extra.moneyExchange, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* monopoly.MoveStepsExtra move_steps = 5; */
        if (message.extra.oneofKind === "moveSteps")
            MoveStepsExtra.internalBinaryWrite(message.extra.moveSteps, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* monopoly.CollectibleExtra collectible = 6; */
        if (message.extra.oneofKind === "collectible")
            CollectibleExtra.internalBinaryWrite(message.extra.collectible, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.Chance
 */
export const Chance = new Chance$Type();
