// @generated by protobuf-ts 2.1.0 with parameter force_client_none
// @generated from protobuf file "monopoly/move_to_tile_extra.proto" (package "monopoly", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coordinate } from "./coordinate";
/**
 * move to each of the tiles sequentially and perform actions on the each
 * tiles. Normally, player would only go to one tile.
 *
 * @generated from protobuf message monopoly.MoveToTileExtra
 */
export interface MoveToTileExtra {
    /**
     * @generated from protobuf field: monopoly.Coordinate tile = 1;
     */
    tile?: Coordinate;
    /**
     * if teleport, the player will immediately appear at the target tile
     * without passing "GO"
     *
     * @generated from protobuf field: bool is_teleport = 2;
     */
    isTeleport: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class MoveToTileExtra$Type extends MessageType<MoveToTileExtra> {
    constructor() {
        super("monopoly.MoveToTileExtra", [
            { no: 1, name: "tile", kind: "message", T: () => Coordinate },
            { no: 2, name: "is_teleport", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MoveToTileExtra>): MoveToTileExtra {
        const message = { isTeleport: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MoveToTileExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveToTileExtra): MoveToTileExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* monopoly.Coordinate tile */ 1:
                    message.tile = Coordinate.internalBinaryRead(reader, reader.uint32(), options, message.tile);
                    break;
                case /* bool is_teleport */ 2:
                    message.isTeleport = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveToTileExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* monopoly.Coordinate tile = 1; */
        if (message.tile)
            Coordinate.internalBinaryWrite(message.tile, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool is_teleport = 2; */
        if (message.isTeleport !== false)
            writer.tag(2, WireType.Varint).bool(message.isTeleport);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.MoveToTileExtra
 */
export const MoveToTileExtra = new MoveToTileExtra$Type();
