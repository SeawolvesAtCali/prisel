// @generated by protobuf-ts 2.1.0 with parameter force_client_none
// @generated from protobuf file "monopoly/payment.proto" (package "monopoly", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PropertyInfo } from "./property";
/**
 * @generated from protobuf message monopoly.Payment
 */
export interface Payment {
    /**
     * @generated from protobuf field: string payee = 1;
     */
    payee: string;
    /**
     * @generated from protobuf field: string payer = 2;
     */
    payer: string;
    /**
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: monopoly.PropertyInfo for_property = 4;
     */
    forProperty?: PropertyInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class Payment$Type extends MessageType<Payment> {
    constructor() {
        super("monopoly.Payment", [
            { no: 1, name: "payee", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "for_property", kind: "message", T: () => PropertyInfo }
        ]);
    }
    create(value?: PartialMessage<Payment>): Payment {
        const message = { payee: "", payer: "", amount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Payment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Payment): Payment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payee */ 1:
                    message.payee = reader.string();
                    break;
                case /* string payer */ 2:
                    message.payer = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                case /* monopoly.PropertyInfo for_property */ 4:
                    message.forProperty = PropertyInfo.internalBinaryRead(reader, reader.uint32(), options, message.forProperty);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Payment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payee = 1; */
        if (message.payee !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payee);
        /* string payer = 2; */
        if (message.payer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.payer);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        /* monopoly.PropertyInfo for_property = 4; */
        if (message.forProperty)
            PropertyInfo.internalBinaryWrite(message.forProperty, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.Payment
 */
export const Payment = new Payment$Type();
