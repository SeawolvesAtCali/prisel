// @generated by protobuf-ts 2.1.0 with parameter force_client_none
// @generated from protobuf file "monopoly/property.proto" (package "monopoly", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coordinate } from "./coordinate";
/**
 * @generated from protobuf message monopoly.PropertyLevel
 */
export interface PropertyLevel {
    /**
     * The cost to reach this level from previous level
     * If this is the first level, the cost is land purchase cost
     *
     * @generated from protobuf field: int32 cost = 1;
     */
    cost: number;
    /**
     * @generated from protobuf field: int32 rent = 2;
     */
    rent: number;
}
/**
 * @generated from protobuf message monopoly.PropertyInfo
 */
export interface PropertyInfo {
    /**
     * @generated from protobuf field: int32 current_level = 1;
     */
    currentLevel: number;
    /**
     * @generated from protobuf field: int32 cost = 2;
     */
    cost: number;
    /**
     * @generated from protobuf field: int32 rent = 3;
     */
    rent: number;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: monopoly.Coordinate pos = 5;
     */
    pos?: Coordinate;
}
// @generated message type with reflection information, may provide speed optimized methods
class PropertyLevel$Type extends MessageType<PropertyLevel> {
    constructor() {
        super("monopoly.PropertyLevel", [
            { no: 1, name: "cost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "rent", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PropertyLevel>): PropertyLevel {
        const message = { cost: 0, rent: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PropertyLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropertyLevel): PropertyLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 cost */ 1:
                    message.cost = reader.int32();
                    break;
                case /* int32 rent */ 2:
                    message.rent = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PropertyLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 cost = 1; */
        if (message.cost !== 0)
            writer.tag(1, WireType.Varint).int32(message.cost);
        /* int32 rent = 2; */
        if (message.rent !== 0)
            writer.tag(2, WireType.Varint).int32(message.rent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.PropertyLevel
 */
export const PropertyLevel = new PropertyLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PropertyInfo$Type extends MessageType<PropertyInfo> {
    constructor() {
        super("monopoly.PropertyInfo", [
            { no: 1, name: "current_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "rent", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pos", kind: "message", T: () => Coordinate }
        ]);
    }
    create(value?: PartialMessage<PropertyInfo>): PropertyInfo {
        const message = { currentLevel: 0, cost: 0, rent: 0, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PropertyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropertyInfo): PropertyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 current_level */ 1:
                    message.currentLevel = reader.int32();
                    break;
                case /* int32 cost */ 2:
                    message.cost = reader.int32();
                    break;
                case /* int32 rent */ 3:
                    message.rent = reader.int32();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* monopoly.Coordinate pos */ 5:
                    message.pos = Coordinate.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PropertyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 current_level = 1; */
        if (message.currentLevel !== 0)
            writer.tag(1, WireType.Varint).int32(message.currentLevel);
        /* int32 cost = 2; */
        if (message.cost !== 0)
            writer.tag(2, WireType.Varint).int32(message.cost);
        /* int32 rent = 3; */
        if (message.rent !== 0)
            writer.tag(3, WireType.Varint).int32(message.rent);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* monopoly.Coordinate pos = 5; */
        if (message.pos)
            Coordinate.internalBinaryWrite(message.pos, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.PropertyInfo
 */
export const PropertyInfo = new PropertyInfo$Type();
