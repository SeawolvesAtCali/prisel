// @generated by protobuf-ts 2.1.0 with parameter force_client_none
// @generated from protobuf file "monopoly/rank.proto" (package "monopoly", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GamePlayer } from "./game_player";
/**
 * @generated from protobuf message monopoly.Asset
 */
export interface Asset {
    /**
     * @generated from protobuf field: int32 cash = 1;
     */
    cash: number;
    /**
     * @generated from protobuf field: int32 property_worth = 2;
     */
    propertyWorth: number;
    /**
     * @generated from protobuf field: int32 total = 3;
     */
    total: number;
}
/**
 * @generated from protobuf message monopoly.Rank
 */
export interface Rank {
    /**
     * @generated from protobuf field: monopoly.GamePlayer player = 1;
     */
    player?: GamePlayer;
    /**
     * @generated from protobuf field: monopoly.Asset asset = 2;
     */
    asset?: Asset;
}
// @generated message type with reflection information, may provide speed optimized methods
class Asset$Type extends MessageType<Asset> {
    constructor() {
        super("monopoly.Asset", [
            { no: 1, name: "cash", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "property_worth", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Asset>): Asset {
        const message = { cash: 0, propertyWorth: 0, total: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Asset>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Asset): Asset {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 cash */ 1:
                    message.cash = reader.int32();
                    break;
                case /* int32 property_worth */ 2:
                    message.propertyWorth = reader.int32();
                    break;
                case /* int32 total */ 3:
                    message.total = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Asset, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 cash = 1; */
        if (message.cash !== 0)
            writer.tag(1, WireType.Varint).int32(message.cash);
        /* int32 property_worth = 2; */
        if (message.propertyWorth !== 0)
            writer.tag(2, WireType.Varint).int32(message.propertyWorth);
        /* int32 total = 3; */
        if (message.total !== 0)
            writer.tag(3, WireType.Varint).int32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.Asset
 */
export const Asset = new Asset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rank$Type extends MessageType<Rank> {
    constructor() {
        super("monopoly.Rank", [
            { no: 1, name: "player", kind: "message", T: () => GamePlayer },
            { no: 2, name: "asset", kind: "message", T: () => Asset }
        ]);
    }
    create(value?: PartialMessage<Rank>): Rank {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Rank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rank): Rank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* monopoly.GamePlayer player */ 1:
                    message.player = GamePlayer.internalBinaryRead(reader, reader.uint32(), options, message.player);
                    break;
                case /* monopoly.Asset asset */ 2:
                    message.asset = Asset.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Rank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* monopoly.GamePlayer player = 1; */
        if (message.player)
            GamePlayer.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* monopoly.Asset asset = 2; */
        if (message.asset)
            Asset.internalBinaryWrite(message.asset, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message monopoly.Rank
 */
export const Rank = new Rank$Type();
