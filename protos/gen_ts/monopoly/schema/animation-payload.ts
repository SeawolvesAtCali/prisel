// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Animation } from '../../monopoly/schema/animation';


export class AnimationPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):AnimationPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnimationPayload(bb:flatbuffers.ByteBuffer, obj?:AnimationPayload):AnimationPayload {
  return (obj || new AnimationPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnimationPayload(bb:flatbuffers.ByteBuffer, obj?:AnimationPayload):AnimationPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnimationPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

animation(obj?:Animation):Animation|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Animation()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startAnimationPayload(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addAnimation(builder:flatbuffers.Builder, animationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, animationOffset, 0);
}

static endAnimationPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAnimationPayload(builder:flatbuffers.Builder, animationOffset:flatbuffers.Offset):flatbuffers.Offset {
  AnimationPayload.startAnimationPayload(builder);
  AnimationPayload.addAnimation(builder, animationOffset);
  return AnimationPayload.endAnimationPayload(builder);
}
}
