// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class AnnounceEndTurnPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):AnnounceEndTurnPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnnounceEndTurnPayload(bb:flatbuffers.ByteBuffer, obj?:AnnounceEndTurnPayload):AnnounceEndTurnPayload {
  return (obj || new AnnounceEndTurnPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnnounceEndTurnPayload(bb:flatbuffers.ByteBuffer, obj?:AnnounceEndTurnPayload):AnnounceEndTurnPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnnounceEndTurnPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

currentPlayer():string|null
currentPlayer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentPlayer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nextPlayer():string|null
nextPlayer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextPlayer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAnnounceEndTurnPayload(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCurrentPlayer(builder:flatbuffers.Builder, currentPlayerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, currentPlayerOffset, 0);
}

static addNextPlayer(builder:flatbuffers.Builder, nextPlayerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nextPlayerOffset, 0);
}

static endAnnounceEndTurnPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAnnounceEndTurnPayload(builder:flatbuffers.Builder, currentPlayerOffset:flatbuffers.Offset, nextPlayerOffset:flatbuffers.Offset):flatbuffers.Offset {
  AnnounceEndTurnPayload.startAnnounceEndTurnPayload(builder);
  AnnounceEndTurnPayload.addCurrentPlayer(builder, currentPlayerOffset);
  AnnounceEndTurnPayload.addNextPlayer(builder, nextPlayerOffset);
  return AnnounceEndTurnPayload.endAnnounceEndTurnPayload(builder);
}
}
