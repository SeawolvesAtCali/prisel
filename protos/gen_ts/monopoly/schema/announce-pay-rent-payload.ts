// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Payment } from '../../monopoly/schema/payment';


export class AnnouncePayRentPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):AnnouncePayRentPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnnouncePayRentPayload(bb:flatbuffers.ByteBuffer, obj?:AnnouncePayRentPayload):AnnouncePayRentPayload {
  return (obj || new AnnouncePayRentPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnnouncePayRentPayload(bb:flatbuffers.ByteBuffer, obj?:AnnouncePayRentPayload):AnnouncePayRentPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnnouncePayRentPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

payer():string|null
payer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
payer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

payments(index: number, obj?:Payment):Payment|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Payment()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

paymentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

myCurrentMoney():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startAnnouncePayRentPayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPayer(builder:flatbuffers.Builder, payerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, payerOffset, 0);
}

static addPayments(builder:flatbuffers.Builder, paymentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, paymentsOffset, 0);
}

static createPaymentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPaymentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMyCurrentMoney(builder:flatbuffers.Builder, myCurrentMoney:number) {
  builder.addFieldInt32(2, myCurrentMoney, 0);
}

static endAnnouncePayRentPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAnnouncePayRentPayload(builder:flatbuffers.Builder, payerOffset:flatbuffers.Offset, paymentsOffset:flatbuffers.Offset, myCurrentMoney:number):flatbuffers.Offset {
  AnnouncePayRentPayload.startAnnouncePayRentPayload(builder);
  AnnouncePayRentPayload.addPayer(builder, payerOffset);
  AnnouncePayRentPayload.addPayments(builder, paymentsOffset);
  AnnouncePayRentPayload.addMyCurrentMoney(builder, myCurrentMoney);
  return AnnouncePayRentPayload.endAnnouncePayRentPayload(builder);
}
}
