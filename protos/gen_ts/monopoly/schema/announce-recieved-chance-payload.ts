// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Chance } from '../../monopoly/schema/chance';


export class AnnounceRecievedChancePayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):AnnounceRecievedChancePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnnounceRecievedChancePayload(bb:flatbuffers.ByteBuffer, obj?:AnnounceRecievedChancePayload):AnnounceRecievedChancePayload {
  return (obj || new AnnounceRecievedChancePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnnounceRecievedChancePayload(bb:flatbuffers.ByteBuffer, obj?:AnnounceRecievedChancePayload):AnnounceRecievedChancePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnnounceRecievedChancePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

player():string|null
player(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
player(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

chance(obj?:Chance):Chance|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Chance()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startAnnounceRecievedChancePayload(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerOffset, 0);
}

static addChance(builder:flatbuffers.Builder, chanceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, chanceOffset, 0);
}

static endAnnounceRecievedChancePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
