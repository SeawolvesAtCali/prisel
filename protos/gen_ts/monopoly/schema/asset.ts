// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Asset {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Asset {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAsset(bb:flatbuffers.ByteBuffer, obj?:Asset):Asset {
  return (obj || new Asset()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAsset(bb:flatbuffers.ByteBuffer, obj?:Asset):Asset {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Asset()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cash():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

propertyWorth():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

total():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startAsset(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCash(builder:flatbuffers.Builder, cash:number) {
  builder.addFieldInt32(0, cash, 0);
}

static addPropertyWorth(builder:flatbuffers.Builder, propertyWorth:number) {
  builder.addFieldInt32(1, propertyWorth, 0);
}

static addTotal(builder:flatbuffers.Builder, total:number) {
  builder.addFieldInt32(2, total, 0);
}

static endAsset(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAsset(builder:flatbuffers.Builder, cash:number, propertyWorth:number, total:number):flatbuffers.Offset {
  Asset.startAsset(builder);
  Asset.addCash(builder, cash);
  Asset.addPropertyWorth(builder, propertyWorth);
  Asset.addTotal(builder, total);
  return Asset.endAsset(builder);
}
}
