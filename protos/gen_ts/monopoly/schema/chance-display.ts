// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ChanceDisplay {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ChanceDisplay {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChanceDisplay(bb:flatbuffers.ByteBuffer, obj?:ChanceDisplay):ChanceDisplay {
  return (obj || new ChanceDisplay()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChanceDisplay(bb:flatbuffers.ByteBuffer, obj?:ChanceDisplay):ChanceDisplay {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChanceDisplay()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

title():string|null
title(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
title(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

image():string|null
image(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
image(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startChanceDisplay(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, titleOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, descriptionOffset, 0);
}

static addImage(builder:flatbuffers.Builder, imageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, imageOffset, 0);
}

static endChanceDisplay(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChanceDisplay(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, imageOffset:flatbuffers.Offset):flatbuffers.Offset {
  ChanceDisplay.startChanceDisplay(builder);
  ChanceDisplay.addTitle(builder, titleOffset);
  ChanceDisplay.addDescription(builder, descriptionOffset);
  ChanceDisplay.addImage(builder, imageOffset);
  return ChanceDisplay.endChanceDisplay(builder);
}
}
