// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ChanceDisplay } from '../../monopoly/schema/chance-display';
import { ChanceExtra, unionToChanceExtra, unionListToChanceExtra } from '../../monopoly/schema/chance-extra';


export class Chance {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Chance {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChance(bb:flatbuffers.ByteBuffer, obj?:Chance):Chance {
  return (obj || new Chance()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChance(bb:flatbuffers.ByteBuffer, obj?:Chance):Chance {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Chance()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

display(obj?:ChanceDisplay):ChanceDisplay|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ChanceDisplay()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

extraType():ChanceExtra {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ChanceExtra.NONE;
}

extra<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startChance(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDisplay(builder:flatbuffers.Builder, displayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, displayOffset, 0);
}

static addExtraType(builder:flatbuffers.Builder, extraType:ChanceExtra) {
  builder.addFieldInt8(1, extraType, ChanceExtra.NONE);
}

static addExtra(builder:flatbuffers.Builder, extraOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, extraOffset, 0);
}

static endChance(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChance(builder:flatbuffers.Builder, displayOffset:flatbuffers.Offset, extraType:ChanceExtra, extraOffset:flatbuffers.Offset):flatbuffers.Offset {
  Chance.startChance(builder);
  Chance.addDisplay(builder, displayOffset);
  Chance.addExtraType(builder, extraType);
  Chance.addExtra(builder, extraOffset);
  return Chance.endChance(builder);
}
}
