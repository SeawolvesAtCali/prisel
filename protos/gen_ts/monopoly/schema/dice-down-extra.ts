// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { GamePlayer } from '../../monopoly/schema/game-player';


export class DiceDownExtra {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DiceDownExtra {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDiceDownExtra(bb:flatbuffers.ByteBuffer, obj?:DiceDownExtra):DiceDownExtra {
  return (obj || new DiceDownExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDiceDownExtra(bb:flatbuffers.ByteBuffer, obj?:DiceDownExtra):DiceDownExtra {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DiceDownExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

steps():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

player(obj?:GamePlayer):GamePlayer|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new GamePlayer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDiceDownExtra(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSteps(builder:flatbuffers.Builder, steps:number) {
  builder.addFieldInt32(0, steps, 0);
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, playerOffset, 0);
}

static endDiceDownExtra(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
