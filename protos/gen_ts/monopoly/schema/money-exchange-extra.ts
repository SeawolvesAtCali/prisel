// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PlayerAmountTuple } from '../../monopoly/schema/player-amount-tuple';


export class MoneyExchangeExtra {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):MoneyExchangeExtra {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMoneyExchangeExtra(bb:flatbuffers.ByteBuffer, obj?:MoneyExchangeExtra):MoneyExchangeExtra {
  return (obj || new MoneyExchangeExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMoneyExchangeExtra(bb:flatbuffers.ByteBuffer, obj?:MoneyExchangeExtra):MoneyExchangeExtra {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MoneyExchangeExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

myCurrentMoney():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

exchanges(index: number, obj?:PlayerAmountTuple):PlayerAmountTuple|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new PlayerAmountTuple()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

exchangesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMoneyExchangeExtra(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMyCurrentMoney(builder:flatbuffers.Builder, myCurrentMoney:number) {
  builder.addFieldInt32(0, myCurrentMoney, 0);
}

static addExchanges(builder:flatbuffers.Builder, exchangesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, exchangesOffset, 0);
}

static createExchangesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startExchangesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMoneyExchangeExtra(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMoneyExchangeExtra(builder:flatbuffers.Builder, myCurrentMoney:number, exchangesOffset:flatbuffers.Offset):flatbuffers.Offset {
  MoneyExchangeExtra.startMoneyExchangeExtra(builder);
  MoneyExchangeExtra.addMyCurrentMoney(builder, myCurrentMoney);
  MoneyExchangeExtra.addExchanges(builder, exchangesOffset);
  return MoneyExchangeExtra.endMoneyExchangeExtra(builder);
}
}
