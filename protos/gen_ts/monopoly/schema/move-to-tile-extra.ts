// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Coordinate } from '../../monopoly/schema/coordinate';


export class MoveToTileExtra {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):MoveToTileExtra {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMoveToTileExtra(bb:flatbuffers.ByteBuffer, obj?:MoveToTileExtra):MoveToTileExtra {
  return (obj || new MoveToTileExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMoveToTileExtra(bb:flatbuffers.ByteBuffer, obj?:MoveToTileExtra):MoveToTileExtra {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MoveToTileExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tile(obj?:Coordinate):Coordinate|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Coordinate()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isTeleport():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startMoveToTileExtra(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTile(builder:flatbuffers.Builder, tileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tileOffset, 0);
}

static addIsTeleport(builder:flatbuffers.Builder, isTeleport:boolean) {
  builder.addFieldInt8(1, +isTeleport, +false);
}

static endMoveToTileExtra(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMoveToTileExtra(builder:flatbuffers.Builder, tileOffset:flatbuffers.Offset, isTeleport:boolean):flatbuffers.Offset {
  MoveToTileExtra.startMoveToTileExtra(builder);
  MoveToTileExtra.addTile(builder, tileOffset);
  MoveToTileExtra.addIsTeleport(builder, isTeleport);
  return MoveToTileExtra.endMoveToTileExtra(builder);
}
}
