// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ChanceDisplay } from '../../monopoly/schema/chance-display';
import { Coordinate } from '../../monopoly/schema/coordinate';


export class OpenChanceChestExtra {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):OpenChanceChestExtra {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOpenChanceChestExtra(bb:flatbuffers.ByteBuffer, obj?:OpenChanceChestExtra):OpenChanceChestExtra {
  return (obj || new OpenChanceChestExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOpenChanceChestExtra(bb:flatbuffers.ByteBuffer, obj?:OpenChanceChestExtra):OpenChanceChestExtra {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OpenChanceChestExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chanceChestTile(obj?:Coordinate):Coordinate|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Coordinate()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

chance(obj?:ChanceDisplay):ChanceDisplay|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ChanceDisplay()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startOpenChanceChestExtra(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addChanceChestTile(builder:flatbuffers.Builder, chanceChestTileOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, chanceChestTileOffset, 0);
}

static addChance(builder:flatbuffers.Builder, chanceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, chanceOffset, 0);
}

static endOpenChanceChestExtra(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
