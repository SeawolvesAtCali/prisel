// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Coordinate } from '../../monopoly/schema/coordinate';


export class PanExtra {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PanExtra {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPanExtra(bb:flatbuffers.ByteBuffer, obj?:PanExtra):PanExtra {
  return (obj || new PanExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPanExtra(bb:flatbuffers.ByteBuffer, obj?:PanExtra):PanExtra {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PanExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

target(obj?:Coordinate):Coordinate|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Coordinate()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPanExtra(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTarget(builder:flatbuffers.Builder, targetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, targetOffset, 0);
}

static endPanExtra(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPanExtra(builder:flatbuffers.Builder, targetOffset:flatbuffers.Offset):flatbuffers.Offset {
  PanExtra.startPanExtra(builder);
  PanExtra.addTarget(builder, targetOffset);
  return PanExtra.endPanExtra(builder);
}
}
