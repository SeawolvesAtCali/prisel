// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { EmotionType } from '../../monopoly/schema/emotion-type';
import { GamePlayer } from '../../monopoly/schema/game-player';


export class PlayerEmotionExtra {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerEmotionExtra {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerEmotionExtra(bb:flatbuffers.ByteBuffer, obj?:PlayerEmotionExtra):PlayerEmotionExtra {
  return (obj || new PlayerEmotionExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerEmotionExtra(bb:flatbuffers.ByteBuffer, obj?:PlayerEmotionExtra):PlayerEmotionExtra {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerEmotionExtra()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

player(obj?:GamePlayer):GamePlayer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new GamePlayer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

emotion():EmotionType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : EmotionType.UNSPECIFIED;
}

static startPlayerEmotionExtra(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerOffset, 0);
}

static addEmotion(builder:flatbuffers.Builder, emotion:EmotionType) {
  builder.addFieldInt32(1, emotion, EmotionType.UNSPECIFIED);
}

static endPlayerEmotionExtra(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerEmotionExtra(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset, emotion:EmotionType):flatbuffers.Offset {
  PlayerEmotionExtra.startPlayerEmotionExtra(builder);
  PlayerEmotionExtra.addPlayer(builder, playerOffset);
  PlayerEmotionExtra.addEmotion(builder, emotion);
  return PlayerEmotionExtra.endPlayerEmotionExtra(builder);
}
}
