// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Coordinate } from '../../monopoly/schema/coordinate';


export class PropertyInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PropertyInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPropertyInfo(bb:flatbuffers.ByteBuffer, obj?:PropertyInfo):PropertyInfo {
  return (obj || new PropertyInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPropertyInfo(bb:flatbuffers.ByteBuffer, obj?:PropertyInfo):PropertyInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PropertyInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

currentLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

cost():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rent():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

pos(obj?:Coordinate):Coordinate|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Coordinate()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPropertyInfo(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addCurrentLevel(builder:flatbuffers.Builder, currentLevel:number) {
  builder.addFieldInt32(0, currentLevel, 0);
}

static addCost(builder:flatbuffers.Builder, cost:number) {
  builder.addFieldInt32(1, cost, 0);
}

static addRent(builder:flatbuffers.Builder, rent:number) {
  builder.addFieldInt32(2, rent, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addPos(builder:flatbuffers.Builder, posOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, posOffset, 0);
}

static endPropertyInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
