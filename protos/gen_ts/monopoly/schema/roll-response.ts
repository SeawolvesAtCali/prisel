// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RollResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):RollResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRollResponse(bb:flatbuffers.ByteBuffer, obj?:RollResponse):RollResponse {
  return (obj || new RollResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRollResponse(bb:flatbuffers.ByteBuffer, obj?:RollResponse):RollResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RollResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

steps():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startRollResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSteps(builder:flatbuffers.Builder, steps:number) {
  builder.addFieldInt32(0, steps, 0);
}

static endRollResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRollResponse(builder:flatbuffers.Builder, steps:number):flatbuffers.Offset {
  RollResponse.startRollResponse(builder);
  RollResponse.addSteps(builder, steps);
  return RollResponse.endRollResponse(builder);
}
}
