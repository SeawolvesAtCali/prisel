// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TileEffectDisplay } from '../../monopoly/schema/tile-effect-display';
import { TileEffectExtra, unionToTileEffectExtra, unionListToTileEffectExtra } from '../../monopoly/schema/tile-effect-extra';
import { TileEffectTiming } from '../../monopoly/schema/tile-effect-timing';


export class TileEffect {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TileEffect {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTileEffect(bb:flatbuffers.ByteBuffer, obj?:TileEffect):TileEffect {
  return (obj || new TileEffect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTileEffect(bb:flatbuffers.ByteBuffer, obj?:TileEffect):TileEffect {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TileEffect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

display(obj?:TileEffectDisplay):TileEffectDisplay|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TileEffectDisplay()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

timing():TileEffectTiming {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : TileEffectTiming.UNSPECIFIED;
}

extraType():TileEffectExtra {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TileEffectExtra.NONE;
}

extra<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startTileEffect(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addDisplay(builder:flatbuffers.Builder, displayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, displayOffset, 0);
}

static addTiming(builder:flatbuffers.Builder, timing:TileEffectTiming) {
  builder.addFieldInt32(1, timing, TileEffectTiming.UNSPECIFIED);
}

static addExtraType(builder:flatbuffers.Builder, extraType:TileEffectExtra) {
  builder.addFieldInt8(2, extraType, TileEffectExtra.NONE);
}

static addExtra(builder:flatbuffers.Builder, extraOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, extraOffset, 0);
}

static endTileEffect(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTileEffect(builder:flatbuffers.Builder, displayOffset:flatbuffers.Offset, timing:TileEffectTiming, extraType:TileEffectExtra, extraOffset:flatbuffers.Offset):flatbuffers.Offset {
  TileEffect.startTileEffect(builder);
  TileEffect.addDisplay(builder, displayOffset);
  TileEffect.addTiming(builder, timing);
  TileEffect.addExtraType(builder, extraType);
  TileEffect.addExtra(builder, extraOffset);
  return TileEffect.endTileEffect(builder);
}
}
