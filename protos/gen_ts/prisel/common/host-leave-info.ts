// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class HostLeaveInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):HostLeaveInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHostLeaveInfo(bb:flatbuffers.ByteBuffer, obj?:HostLeaveInfo):HostLeaveInfo {
  return (obj || new HostLeaveInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHostLeaveInfo(bb:flatbuffers.ByteBuffer, obj?:HostLeaveInfo):HostLeaveInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HostLeaveInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hostId():string|null
hostId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

newHostId():string|null
newHostId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
newHostId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHostLeaveInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addHostId(builder:flatbuffers.Builder, hostIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hostIdOffset, 0);
}

static addNewHostId(builder:flatbuffers.Builder, newHostIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, newHostIdOffset, 0);
}

static endHostLeaveInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHostLeaveInfo(builder:flatbuffers.Builder, hostIdOffset:flatbuffers.Offset, newHostIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  HostLeaveInfo.startHostLeaveInfo(builder);
  HostLeaveInfo.addHostId(builder, hostIdOffset);
  HostLeaveInfo.addNewHostId(builder, newHostIdOffset);
  return HostLeaveInfo.endHostLeaveInfo(builder);
}
}
