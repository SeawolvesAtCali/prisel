// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { RoomInfo } from '../../prisel/common/room-info';


export class LobbyRoomViewInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):LobbyRoomViewInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLobbyRoomViewInfo(bb:flatbuffers.ByteBuffer, obj?:LobbyRoomViewInfo):LobbyRoomViewInfo {
  return (obj || new LobbyRoomViewInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLobbyRoomViewInfo(bb:flatbuffers.ByteBuffer, obj?:LobbyRoomViewInfo):LobbyRoomViewInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LobbyRoomViewInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

room(obj?:RoomInfo):RoomInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new RoomInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

playerCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxPlayers():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startLobbyRoomViewInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRoom(builder:flatbuffers.Builder, roomOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, roomOffset, 0);
}

static addPlayerCount(builder:flatbuffers.Builder, playerCount:number) {
  builder.addFieldInt32(1, playerCount, 0);
}

static addMaxPlayers(builder:flatbuffers.Builder, maxPlayers:number) {
  builder.addFieldInt32(2, maxPlayers, 0);
}

static endLobbyRoomViewInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLobbyRoomViewInfo(builder:flatbuffers.Builder, roomOffset:flatbuffers.Offset, playerCount:number, maxPlayers:number):flatbuffers.Offset {
  LobbyRoomViewInfo.startLobbyRoomViewInfo(builder);
  LobbyRoomViewInfo.addRoom(builder, roomOffset);
  LobbyRoomViewInfo.addPlayerCount(builder, playerCount);
  LobbyRoomViewInfo.addMaxPlayers(builder, maxPlayers);
  return LobbyRoomViewInfo.endLobbyRoomViewInfo(builder);
}
}
