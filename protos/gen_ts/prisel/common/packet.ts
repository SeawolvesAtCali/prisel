// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PacketType } from '../../prisel/common/packet-type';
import { Status } from '../../prisel/common/status';
import { SystemActionType } from '../../prisel/common/system-action-type';


export class Packet {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Packet {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPacket(bb:flatbuffers.ByteBuffer, obj?:Packet):Packet {
  return (obj || new Packet()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPacket(bb:flatbuffers.ByteBuffer, obj?:Packet):Packet {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Packet()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():PacketType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : PacketType.DEFAULT;
}

requestId():string|null
requestId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
requestId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

systemActionType():SystemActionType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : SystemActionType.UNSPECIFIED;
}

actionType():string|null
actionType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
actionType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

status(obj?:Status):Status|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Status()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

payload(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

payloadLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

payloadArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startPacket(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addType(builder:flatbuffers.Builder, type:PacketType) {
  builder.addFieldInt32(0, type, PacketType.DEFAULT);
}

static addRequestId(builder:flatbuffers.Builder, requestIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, requestIdOffset, 0);
}

static addSystemActionType(builder:flatbuffers.Builder, systemActionType:SystemActionType) {
  builder.addFieldInt32(2, systemActionType, SystemActionType.UNSPECIFIED);
}

static addActionType(builder:flatbuffers.Builder, actionTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, actionTypeOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, statusOffset, 0);
}

static addPayload(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, payloadOffset, 0);
}

static createPayloadVector(builder:flatbuffers.Builder, data:number[]|Int8Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPayloadVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPayloadVector(builder:flatbuffers.Builder, data:number[]|Int8Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPayloadVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endPacket(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
