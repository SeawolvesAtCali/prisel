// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "prisel/create_room_spec.proto" (package "prisel", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RoomStateSnapshot } from "./room_state_snapshot";
import { RoomInfo } from "./room_info";
/**
 * type : CREATE_ROOM,
 * packet_type : REQUEST
 *
 * @generated from protobuf message prisel.CreateRoomRequest
 */
export interface CreateRoomRequest {
    /**
     * @generated from protobuf field: string roomName = 1;
     */
    roomName: string;
}
/**
 * type : CREATE_ROOM,
 * packet_type : RESPONSE
 *
 * @generated from protobuf message prisel.CreateRoomResponse
 */
export interface CreateRoomResponse {
    /**
     * @generated from protobuf field: prisel.RoomInfo room = 1;
     */
    room?: RoomInfo;
    /**
     * @generated from protobuf field: prisel.RoomStateSnapshot room_state = 2;
     */
    roomState?: RoomStateSnapshot;
}
/**
 * Type for protobuf message prisel.CreateRoomRequest
 */
class CreateRoomRequest$Type extends MessageType<CreateRoomRequest> {
    constructor() {
        super("prisel.CreateRoomRequest", [
            { no: 1, name: "roomName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRoomRequest>): CreateRoomRequest {
        const message = { roomName: "" };
        if (value !== undefined)
            reflectionMergePartial<CreateRoomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoomRequest): CreateRoomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string roomName */ 1:
                    message.roomName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string roomName = 1; */
        if (message.roomName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roomName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const CreateRoomRequest = new CreateRoomRequest$Type();
/**
 * Type for protobuf message prisel.CreateRoomResponse
 */
class CreateRoomResponse$Type extends MessageType<CreateRoomResponse> {
    constructor() {
        super("prisel.CreateRoomResponse", [
            { no: 1, name: "room", kind: "message", T: () => RoomInfo },
            { no: 2, name: "room_state", kind: "message", T: () => RoomStateSnapshot }
        ]);
    }
    create(value?: PartialMessage<CreateRoomResponse>): CreateRoomResponse {
        const message = {};
        if (value !== undefined)
            reflectionMergePartial<CreateRoomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoomResponse): CreateRoomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prisel.RoomInfo room */ 1:
                    message.room = RoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.room);
                    break;
                case /* prisel.RoomStateSnapshot room_state */ 2:
                    message.roomState = RoomStateSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.roomState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prisel.RoomInfo room = 1; */
        if (message.room)
            RoomInfo.internalBinaryWrite(message.room, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* prisel.RoomStateSnapshot room_state = 2; */
        if (message.roomState)
            RoomStateSnapshot.internalBinaryWrite(message.roomState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const CreateRoomResponse = new CreateRoomResponse$Type();
