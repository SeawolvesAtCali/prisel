// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "prisel/get_lobby_state_spec.proto" (package "prisel", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RoomInfo } from "./room_info";
/**
 * type : GET_LOBBY_STATE,
 * packet_type : RESPONSE
 *
 * @generated from protobuf message prisel.GetLobbyStateResponse
 */
export interface GetLobbyStateResponse {
    /**
     * @generated from protobuf field: repeated prisel.GetLobbyStateResponse.LobbyRoomViewInfo rooms = 1;
     */
    rooms: GetLobbyStateResponse_LobbyRoomViewInfo[];
}
/**
 * @generated from protobuf message prisel.GetLobbyStateResponse.LobbyRoomViewInfo
 */
export interface GetLobbyStateResponse_LobbyRoomViewInfo {
    /**
     * @generated from protobuf field: prisel.RoomInfo room = 1;
     */
    room?: RoomInfo;
    /**
     * @generated from protobuf field: int32 player_count = 2;
     */
    playerCount: number;
    /**
     * @generated from protobuf field: int32 max_players = 3;
     */
    maxPlayers: number;
}
/**
 * Type for protobuf message prisel.GetLobbyStateResponse
 */
class GetLobbyStateResponse$Type extends MessageType<GetLobbyStateResponse> {
    constructor() {
        super("prisel.GetLobbyStateResponse", [
            { no: 1, name: "rooms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetLobbyStateResponse_LobbyRoomViewInfo }
        ]);
    }
    create(value?: PartialMessage<GetLobbyStateResponse>): GetLobbyStateResponse {
        const message = { rooms: [] };
        if (value !== undefined)
            reflectionMergePartial<GetLobbyStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLobbyStateResponse): GetLobbyStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated prisel.GetLobbyStateResponse.LobbyRoomViewInfo rooms */ 1:
                    message.rooms.push(GetLobbyStateResponse_LobbyRoomViewInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLobbyStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated prisel.GetLobbyStateResponse.LobbyRoomViewInfo rooms = 1; */
        for (let i = 0; i < message.rooms.length; i++)
            GetLobbyStateResponse_LobbyRoomViewInfo.internalBinaryWrite(message.rooms[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const GetLobbyStateResponse = new GetLobbyStateResponse$Type();
/**
 * Type for protobuf message prisel.GetLobbyStateResponse.LobbyRoomViewInfo
 */
class GetLobbyStateResponse_LobbyRoomViewInfo$Type extends MessageType<GetLobbyStateResponse_LobbyRoomViewInfo> {
    constructor() {
        super("prisel.GetLobbyStateResponse.LobbyRoomViewInfo", [
            { no: 1, name: "room", kind: "message", T: () => RoomInfo },
            { no: 2, name: "player_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "max_players", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetLobbyStateResponse_LobbyRoomViewInfo>): GetLobbyStateResponse_LobbyRoomViewInfo {
        const message = { playerCount: 0, maxPlayers: 0 };
        if (value !== undefined)
            reflectionMergePartial<GetLobbyStateResponse_LobbyRoomViewInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLobbyStateResponse_LobbyRoomViewInfo): GetLobbyStateResponse_LobbyRoomViewInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prisel.RoomInfo room */ 1:
                    message.room = RoomInfo.internalBinaryRead(reader, reader.uint32(), options, message.room);
                    break;
                case /* int32 player_count */ 2:
                    message.playerCount = reader.int32();
                    break;
                case /* int32 max_players */ 3:
                    message.maxPlayers = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLobbyStateResponse_LobbyRoomViewInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prisel.RoomInfo room = 1; */
        if (message.room)
            RoomInfo.internalBinaryWrite(message.room, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 player_count = 2; */
        if (message.playerCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerCount);
        /* int32 max_players = 3; */
        if (message.maxPlayers !== 0)
            writer.tag(3, WireType.Varint).int32(message.maxPlayers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const GetLobbyStateResponse_LobbyRoomViewInfo = new GetLobbyStateResponse_LobbyRoomViewInfo$Type();
