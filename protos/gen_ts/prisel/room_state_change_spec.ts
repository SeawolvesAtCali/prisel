// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "prisel/room_state_change_spec.proto" (package "prisel", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UpdateToken } from "./update_token";
import { PlayerInfo } from "./player_info";
/**
 * type : ROOM_STATE_CHANGE,
 * packet_type : DEFAULT
 *
 * @generated from protobuf message prisel.RoomStateChangePayload
 */
export interface RoomStateChangePayload {
    /**
     * @generated from protobuf oneof: change
     */
    change: {
        oneofKind: "playerJoin";
        /**
         * @generated from protobuf field: prisel.PlayerInfo player_join = 1;
         */
        playerJoin: PlayerInfo;
    } | {
        oneofKind: "playerLeave";
        /**
         * @generated from protobuf field: string player_leave = 2;
         */
        playerLeave: string;
    } | {
        oneofKind: "hostLeave";
        /**
         * @generated from protobuf field: prisel.RoomStateChangePayload.HostLeaveData host_leave = 3;
         */
        hostLeave: RoomStateChangePayload_HostLeaveData;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: prisel.UpdateToken token = 4;
     */
    token?: UpdateToken;
}
/**
 * @generated from protobuf message prisel.RoomStateChangePayload.HostLeaveData
 */
export interface RoomStateChangePayload_HostLeaveData {
    /**
     * @generated from protobuf field: string host_id = 1;
     */
    hostId: string;
    /**
     * @generated from protobuf field: string new_host_id = 2;
     */
    newHostId: string;
}
/**
 * Type for protobuf message prisel.RoomStateChangePayload
 */
class RoomStateChangePayload$Type extends MessageType<RoomStateChangePayload> {
    constructor() {
        super("prisel.RoomStateChangePayload", [
            { no: 1, name: "player_join", kind: "message", oneof: "change", T: () => PlayerInfo },
            { no: 2, name: "player_leave", kind: "scalar", oneof: "change", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "host_leave", kind: "message", oneof: "change", T: () => RoomStateChangePayload_HostLeaveData },
            { no: 4, name: "token", kind: "message", T: () => UpdateToken }
        ]);
    }
    create(value?: PartialMessage<RoomStateChangePayload>): RoomStateChangePayload {
        const message = { change: { oneofKind: undefined } };
        if (value !== undefined)
            reflectionMergePartial<RoomStateChangePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomStateChangePayload): RoomStateChangePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prisel.PlayerInfo player_join */ 1:
                    message.change = {
                        oneofKind: "playerJoin",
                        playerJoin: PlayerInfo.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).playerJoin)
                    };
                    break;
                case /* string player_leave */ 2:
                    message.change = {
                        oneofKind: "playerLeave",
                        playerLeave: reader.string()
                    };
                    break;
                case /* prisel.RoomStateChangePayload.HostLeaveData host_leave */ 3:
                    message.change = {
                        oneofKind: "hostLeave",
                        hostLeave: RoomStateChangePayload_HostLeaveData.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).hostLeave)
                    };
                    break;
                case /* prisel.UpdateToken token */ 4:
                    message.token = UpdateToken.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomStateChangePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prisel.PlayerInfo player_join = 1; */
        if (message.change.oneofKind === "playerJoin")
            PlayerInfo.internalBinaryWrite(message.change.playerJoin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string player_leave = 2; */
        if (message.change.oneofKind === "playerLeave")
            writer.tag(2, WireType.LengthDelimited).string(message.change.playerLeave);
        /* prisel.RoomStateChangePayload.HostLeaveData host_leave = 3; */
        if (message.change.oneofKind === "hostLeave")
            RoomStateChangePayload_HostLeaveData.internalBinaryWrite(message.change.hostLeave, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* prisel.UpdateToken token = 4; */
        if (message.token)
            UpdateToken.internalBinaryWrite(message.token, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const RoomStateChangePayload = new RoomStateChangePayload$Type();
/**
 * Type for protobuf message prisel.RoomStateChangePayload.HostLeaveData
 */
class RoomStateChangePayload_HostLeaveData$Type extends MessageType<RoomStateChangePayload_HostLeaveData> {
    constructor() {
        super("prisel.RoomStateChangePayload.HostLeaveData", [
            { no: 1, name: "host_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_host_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomStateChangePayload_HostLeaveData>): RoomStateChangePayload_HostLeaveData {
        const message = { hostId: "", newHostId: "" };
        if (value !== undefined)
            reflectionMergePartial<RoomStateChangePayload_HostLeaveData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomStateChangePayload_HostLeaveData): RoomStateChangePayload_HostLeaveData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host_id */ 1:
                    message.hostId = reader.string();
                    break;
                case /* string new_host_id */ 2:
                    message.newHostId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomStateChangePayload_HostLeaveData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host_id = 1; */
        if (message.hostId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hostId);
        /* string new_host_id = 2; */
        if (message.newHostId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newHostId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const RoomStateChangePayload_HostLeaveData = new RoomStateChangePayload_HostLeaveData$Type();
