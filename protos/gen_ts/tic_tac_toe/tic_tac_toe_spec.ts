// @generated by protobuf-ts 2.1.0 with parameter force_client_none
// @generated from protobuf file "tic_tac_toe/tic_tac_toe_spec.proto" (package "tic_tac_toe", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * type : "move"
 * packet_type : REQUEST
 *
 * @generated from protobuf message tic_tac_toe.MovePayload
 */
export interface MovePayload {
    /**
     * @generated from protobuf field: uint32 position = 1;
     */
    position: number;
}
/**
 * type : "game_state"
 * packet_type : DEFAULT
 *
 * @generated from protobuf message tic_tac_toe.GameStatePayload
 */
export interface GameStatePayload {
    /**
     * @generated from protobuf field: repeated string player = 1;
     */
    player: string[];
    /**
     * @generated from protobuf field: repeated string map = 2;
     */
    map: string[];
    /**
     * @generated from protobuf field: string current_player = 3;
     */
    currentPlayer: string;
    /**
     * @generated from protobuf field: optional string winner = 4;
     */
    winner?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class MovePayload$Type extends MessageType<MovePayload> {
    constructor() {
        super("tic_tac_toe.MovePayload", [
            { no: 1, name: "position", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MovePayload>): MovePayload {
        const message = { position: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MovePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MovePayload): MovePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 position */ 1:
                    message.position = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MovePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 position = 1; */
        if (message.position !== 0)
            writer.tag(1, WireType.Varint).uint32(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tic_tac_toe.MovePayload
 */
export const MovePayload = new MovePayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameStatePayload$Type extends MessageType<GameStatePayload> {
    constructor() {
        super("tic_tac_toe.GameStatePayload", [
            { no: 1, name: "player", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "map", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "current_player", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "winner", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameStatePayload>): GameStatePayload {
        const message = { player: [], map: [], currentPlayer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameStatePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameStatePayload): GameStatePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string player */ 1:
                    message.player.push(reader.string());
                    break;
                case /* repeated string map */ 2:
                    message.map.push(reader.string());
                    break;
                case /* string current_player */ 3:
                    message.currentPlayer = reader.string();
                    break;
                case /* optional string winner */ 4:
                    message.winner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameStatePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string player = 1; */
        for (let i = 0; i < message.player.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.player[i]);
        /* repeated string map = 2; */
        for (let i = 0; i < message.map.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.map[i]);
        /* string current_player = 3; */
        if (message.currentPlayer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currentPlayer);
        /* optional string winner = 4; */
        if (message.winner !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.winner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tic_tac_toe.GameStatePayload
 */
export const GameStatePayload = new GameStatePayload$Type();
