// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PlayerInfo } from '../prisel/common/player-info';


export class GameStatePayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):GameStatePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameStatePayload(bb:flatbuffers.ByteBuffer, obj?:GameStatePayload):GameStatePayload {
  return (obj || new GameStatePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameStatePayload(bb:flatbuffers.ByteBuffer, obj?:GameStatePayload):GameStatePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameStatePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

player(index: number, obj?:PlayerInfo):PlayerInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PlayerInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

map(index: number):string
map(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
map(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mapLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

currentPlayer():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

winner():string|null
winner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
winner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startGameStatePayload(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerOffset, 0);
}

static createPlayerVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMap(builder:flatbuffers.Builder, mapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mapOffset, 0);
}

static createMapVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMapVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCurrentPlayer(builder:flatbuffers.Builder, currentPlayer:number) {
  builder.addFieldInt32(2, currentPlayer, 0);
}

static addWinner(builder:flatbuffers.Builder, winnerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, winnerOffset, 0);
}

static endGameStatePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGameStatePayload(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset, mapOffset:flatbuffers.Offset, currentPlayer:number, winnerOffset:flatbuffers.Offset):flatbuffers.Offset {
  GameStatePayload.startGameStatePayload(builder);
  GameStatePayload.addPlayer(builder, playerOffset);
  GameStatePayload.addMap(builder, mapOffset);
  GameStatePayload.addCurrentPlayer(builder, currentPlayer);
  GameStatePayload.addWinner(builder, winnerOffset);
  return GameStatePayload.endGameStatePayload(builder);
}
}
