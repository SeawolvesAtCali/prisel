// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class MovePayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):MovePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMovePayload(bb:flatbuffers.ByteBuffer, obj?:MovePayload):MovePayload {
  return (obj || new MovePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMovePayload(bb:flatbuffers.ByteBuffer, obj?:MovePayload):MovePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MovePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

position():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startMovePayload(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPosition(builder:flatbuffers.Builder, position:number) {
  builder.addFieldInt32(0, position, 0);
}

static endMovePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMovePayload(builder:flatbuffers.Builder, position:number):flatbuffers.Offset {
  MovePayload.startMovePayload(builder);
  MovePayload.addPosition(builder, position);
  return MovePayload.endMovePayload(builder);
}
}
